
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000238a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000238a  0000241e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800076  00800076  00002434  2**0
                  ALLOC
  3 .stab         000025ec  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001420  00000000  00000000  00004a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000060f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000099d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a58f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__vector_3>
      10:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__vector_8>
      24:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void BUZZER_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 4c 09 	call	0x1298	; 0x1298 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <BUZZER_on>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void BUZZER_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_off>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void BUZZER_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
#include <avr/io.h>
#include <avr/delay.h>


int main(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	6c 97       	sbiw	r28, 0x1c	; 28
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	uint8 receivedByte = 0;
     bac:	19 82       	std	Y+1, r1	; 0x01

	SREG |= (1<<7); /* Enable I-Bit for Interrupts*/
     bae:	af e5       	ldi	r26, 0x5F	; 95
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ef e5       	ldi	r30, 0x5F	; 95
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	80 68       	ori	r24, 0x80	; 128
     bba:	8c 93       	st	X, r24

	/* Create configuration structure for UART driver */
	UART_ConfigType UART_Config = {EIGHT_BIT,DISABLED,ONT_BIT,9600};
     bbc:	9e 01       	movw	r18, r28
     bbe:	2e 5f       	subi	r18, 0xFE	; 254
     bc0:	3f 4f       	sbci	r19, 0xFF	; 255
     bc2:	3c 8b       	std	Y+20, r19	; 0x14
     bc4:	2b 8b       	std	Y+19, r18	; 0x13
     bc6:	8e e6       	ldi	r24, 0x6E	; 110
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	9e 8b       	std	Y+22, r25	; 0x16
     bcc:	8d 8b       	std	Y+21, r24	; 0x15
     bce:	97 e0       	ldi	r25, 0x07	; 7
     bd0:	9f 8b       	std	Y+23, r25	; 0x17
     bd2:	ed 89       	ldd	r30, Y+21	; 0x15
     bd4:	fe 89       	ldd	r31, Y+22	; 0x16
     bd6:	00 80       	ld	r0, Z
     bd8:	2d 89       	ldd	r18, Y+21	; 0x15
     bda:	3e 89       	ldd	r19, Y+22	; 0x16
     bdc:	2f 5f       	subi	r18, 0xFF	; 255
     bde:	3f 4f       	sbci	r19, 0xFF	; 255
     be0:	3e 8b       	std	Y+22, r19	; 0x16
     be2:	2d 8b       	std	Y+21, r18	; 0x15
     be4:	eb 89       	ldd	r30, Y+19	; 0x13
     be6:	fc 89       	ldd	r31, Y+20	; 0x14
     be8:	00 82       	st	Z, r0
     bea:	2b 89       	ldd	r18, Y+19	; 0x13
     bec:	3c 89       	ldd	r19, Y+20	; 0x14
     bee:	2f 5f       	subi	r18, 0xFF	; 255
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
     bf2:	3c 8b       	std	Y+20, r19	; 0x14
     bf4:	2b 8b       	std	Y+19, r18	; 0x13
     bf6:	3f 89       	ldd	r19, Y+23	; 0x17
     bf8:	31 50       	subi	r19, 0x01	; 1
     bfa:	3f 8b       	std	Y+23, r19	; 0x17
     bfc:	8f 89       	ldd	r24, Y+23	; 0x17
     bfe:	88 23       	and	r24, r24
     c00:	41 f7       	brne	.-48     	; 0xbd2 <main+0x3a>
	UART_init(&UART_Config);		/* Initialize UART driver */
     c02:	ce 01       	movw	r24, r28
     c04:	02 96       	adiw	r24, 0x02	; 2
     c06:	0e 94 45 10 	call	0x208a	; 0x208a <UART_init>

	/* Create configuration structure for Timer driver */
	Timer_ConfigType TIMER_Config = {TIMER1, COMPARE,0,7812,CLK_1024};
     c0a:	fe 01       	movw	r30, r28
     c0c:	39 96       	adiw	r30, 0x09	; 9
     c0e:	f9 8f       	std	Y+25, r31	; 0x19
     c10:	e8 8f       	std	Y+24, r30	; 0x18
     c12:	28 e6       	ldi	r18, 0x68	; 104
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	3b 8f       	std	Y+27, r19	; 0x1b
     c18:	2a 8f       	std	Y+26, r18	; 0x1a
     c1a:	36 e0       	ldi	r19, 0x06	; 6
     c1c:	3c 8f       	std	Y+28, r19	; 0x1c
     c1e:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c20:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c22:	00 80       	ld	r0, Z
     c24:	2a 8d       	ldd	r18, Y+26	; 0x1a
     c26:	3b 8d       	ldd	r19, Y+27	; 0x1b
     c28:	2f 5f       	subi	r18, 0xFF	; 255
     c2a:	3f 4f       	sbci	r19, 0xFF	; 255
     c2c:	3b 8f       	std	Y+27, r19	; 0x1b
     c2e:	2a 8f       	std	Y+26, r18	; 0x1a
     c30:	e8 8d       	ldd	r30, Y+24	; 0x18
     c32:	f9 8d       	ldd	r31, Y+25	; 0x19
     c34:	00 82       	st	Z, r0
     c36:	28 8d       	ldd	r18, Y+24	; 0x18
     c38:	39 8d       	ldd	r19, Y+25	; 0x19
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
     c3e:	39 8f       	std	Y+25, r19	; 0x19
     c40:	28 8f       	std	Y+24, r18	; 0x18
     c42:	3c 8d       	ldd	r19, Y+28	; 0x1c
     c44:	31 50       	subi	r19, 0x01	; 1
     c46:	3c 8f       	std	Y+28, r19	; 0x1c
     c48:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c4a:	88 23       	and	r24, r24
     c4c:	41 f7       	brne	.-48     	; 0xc1e <main+0x86>
	Timer_init(&TIMER_Config);		/* Initialize Timer driver */
     c4e:	ce 01       	movw	r24, r28
     c50:	09 96       	adiw	r24, 0x09	; 9
     c52:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <Timer_init>
	Timer_setCallBack(Timer_CallBackFunction,TIMER1);
     c56:	89 e3       	ldi	r24, 0x39	; 57
     c58:	98 e0       	ldi	r25, 0x08	; 8
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Timer_setCallBack>

	/* Create configuration structure for I2C driver */
	TWI_ConfigType TWI_Config = {0x02,FAST_MODE};
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	8f 87       	std	Y+15, r24	; 0x0f
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	88 8b       	std	Y+16, r24	; 0x10
	TWI_init(&TWI_Config);			/* Initialize I2C driver */
     c68:	ce 01       	movw	r24, r28
     c6a:	0f 96       	adiw	r24, 0x0f	; 15
     c6c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_init>

	BUZZER_init();					/* Initialize BUZZER driver */
     c70:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>

	DcMotor_Init();					/*Initialize the DcMotor */
     c74:	0e 94 45 08 	call	0x108a	; 0x108a <DcMotor_Init>

	CTRL_takeFirstPassword();		/* Receive the password and confirmation password from the
     c78:	0e 94 a3 06 	call	0xd46	; 0xd46 <CTRL_takeFirstPassword>
	 	 	 	 	 	 	 	 	   the HMI ECU */

	while(1)
	{
		while(UART_recieveByte() != READY_TO_SEND); /* Receive from HMI to be ready to receive */
     c7c:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_recieveByte>
     c80:	80 31       	cpi	r24, 0x10	; 16
     c82:	e1 f7       	brne	.-8      	; 0xc7c <main+0xe4>
		UART_sendByte(READY_TO_RECEIVE); /* Inform HMI to start sending */
     c84:	80 e2       	ldi	r24, 0x20	; 32
     c86:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
		CTRL_receivePasswordByUART(g_receivedPassword); /* Receive the password from HMI ECU */
     c8a:	8e e7       	ldi	r24, 0x7E	; 126
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 1c 07 	call	0xe38	; 0xe38 <CTRL_receivePasswordByUART>

		receivedByte = UART_recieveByte(); /* Receive the selected option (select to open the door
     c92:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_recieveByte>
     c96:	89 83       	std	Y+1, r24	; 0x01
											  or to change the password) */

		switch(receivedByte)
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	e8 2f       	mov	r30, r24
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	fa 8b       	std	Y+18, r31	; 0x12
     ca0:	e9 8b       	std	Y+17, r30	; 0x11
     ca2:	29 89       	ldd	r18, Y+17	; 0x11
     ca4:	3a 89       	ldd	r19, Y+18	; 0x12
     ca6:	2b 32       	cpi	r18, 0x2B	; 43
     ca8:	31 05       	cpc	r19, r1
     caa:	31 f0       	breq	.+12     	; 0xcb8 <main+0x120>
     cac:	89 89       	ldd	r24, Y+17	; 0x11
     cae:	9a 89       	ldd	r25, Y+18	; 0x12
     cb0:	8d 32       	cpi	r24, 0x2D	; 45
     cb2:	91 05       	cpc	r25, r1
     cb4:	79 f1       	breq	.+94     	; 0xd14 <main+0x17c>
     cb6:	e2 cf       	rjmp	.-60     	; 0xc7c <main+0xe4>
		{
		case DOOR_OPEN_OPTION:
			/* Checking if the received password and stored password in EEPROM identical or not */
			if(CTRL_verifyPassword(g_storedPassword, g_receivedPassword) == SUCCESS)
     cb8:	83 e8       	ldi	r24, 0x83	; 131
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	2e e7       	ldi	r18, 0x7E	; 126
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	b9 01       	movw	r22, r18
     cc2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CTRL_verifyPassword>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	49 f4       	brne	.+18     	; 0xcdc <main+0x144>
			{
				UART_sendByte(READY_TO_RECEIVE); /* Inform HMI ECU to be ready to receive */
     cca:	80 e2       	ldi	r24, 0x20	; 32
     ccc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
				UART_sendByte(OPEN_DOOR);		/* Sending to HMI ECU to open the door */
     cd0:	85 e2       	ldi	r24, 0x25	; 37
     cd2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
				CTRL_openingDoor();	/* Start opening the door */
     cd6:	0e 94 14 08 	call	0x1028	; 0x1028 <CTRL_openingDoor>
     cda:	d0 cf       	rjmp	.-96     	; 0xc7c <main+0xe4>
			}
			else
			{
				UART_sendByte(READY_TO_RECEIVE); /* Inform HMI ECU to be ready to receive */
     cdc:	80 e2       	ldi	r24, 0x20	; 32
     cde:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
				UART_sendByte(WRONG_PASSWORD);	/* Sending to HMI ECU that the password wrong */
     ce2:	80 e3       	ldi	r24, 0x30	; 48
     ce4:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
				g_wrongTrial++;		/* Increment the counter for wrong attempts */
     ce8:	80 91 76 00 	lds	r24, 0x0076
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	80 93 76 00 	sts	0x0076, r24
				if(g_wrongTrial == MAX_ALLOWED_TRIALS)
     cf2:	80 91 76 00 	lds	r24, 0x0076
     cf6:	83 30       	cpi	r24, 0x03	; 3
     cf8:	09 f6       	brne	.-126    	; 0xc7c <main+0xe4>
				{
					BUZZER_on(); /* Turn on the Buzzer */
     cfa:	0e 94 b4 05 	call	0xb68	; 0xb68 <BUZZER_on>
					g_seconds = 0;
     cfe:	10 92 77 00 	sts	0x0077, r1
					while(g_seconds != BUZZER_ACTIVE_PERIOD);
     d02:	80 91 77 00 	lds	r24, 0x0077
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	e1 f7       	brne	.-8      	; 0xd02 <main+0x16a>
					BUZZER_off();
     d0a:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_off>
					g_wrongTrial = 0;		/* reset the number of trials */
     d0e:	10 92 76 00 	sts	0x0076, r1
     d12:	b4 cf       	rjmp	.-152    	; 0xc7c <main+0xe4>
			}
			break;

		case CHANGE_PASSWORD_OPTION:
			/* Checking if the received password and stored password in EEPROM identical or not */
			if(CTRL_verifyPassword(g_storedPassword, g_receivedPassword) == SUCCESS)
     d14:	83 e8       	ldi	r24, 0x83	; 131
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	2e e7       	ldi	r18, 0x7E	; 126
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	b9 01       	movw	r22, r18
     d1e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CTRL_verifyPassword>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	49 f4       	brne	.+18     	; 0xd38 <main+0x1a0>
			{
				UART_sendByte(READY_TO_RECEIVE); /* Inform the HMI ECU to be ready to receive */
     d26:	80 e2       	ldi	r24, 0x20	; 32
     d28:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>

				UART_sendByte(CHANGING_PASSWORD); /* Send to HMI that password correct and allow the
     d2c:	81 e3       	ldi	r24, 0x31	; 49
     d2e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
				 	 	 	 	 	 	 	 	     the user to change the password */
				CTRL_takeFirstPassword(); /* Receive the new password from the user */
     d32:	0e 94 a3 06 	call	0xd46	; 0xd46 <CTRL_takeFirstPassword>
     d36:	a2 cf       	rjmp	.-188    	; 0xc7c <main+0xe4>
			}
			else
			{
				UART_sendByte(READY_TO_RECEIVE); /* Inform the HMI ECU to be ready to receive */
     d38:	80 e2       	ldi	r24, 0x20	; 32
     d3a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>

				UART_sendByte(WRONG_PASSWORD); /* Send to HMI that password incorrect */
     d3e:	80 e3       	ldi	r24, 0x30	; 48
     d40:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
     d44:	9b cf       	rjmp	.-202    	; 0xc7c <main+0xe4>

00000d46 <CTRL_takeFirstPassword>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void CTRL_takeFirstPassword(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <CTRL_takeFirstPassword+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <CTRL_takeFirstPassword+0x8>
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <CTRL_takeFirstPassword+0xa>
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	uint8 verify;

	uint8 confirmationPassword[PASSWORD_LENGTH]; /* To store second received password */
	while(1)
	{
		while (UART_recieveByte() != READY_TO_SEND);
     d54:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_recieveByte>
     d58:	80 31       	cpi	r24, 0x10	; 16
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <CTRL_takeFirstPassword+0xe>
		UART_sendByte(READY_TO_RECEIVE);		/* Tell the other HMI controller than control micro-controller
     d5c:	80 e2       	ldi	r24, 0x20	; 32
     d5e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
													ready to receive the password */
		CTRL_receivePasswordByUART(g_receivedPassword);		/*Receive the first password from HMI micro-controller*/
     d62:	8e e7       	ldi	r24, 0x7E	; 126
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 1c 07 	call	0xe38	; 0xe38 <CTRL_receivePasswordByUART>

		while (UART_recieveByte() != READY_TO_SEND);
     d6a:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_recieveByte>
     d6e:	80 31       	cpi	r24, 0x10	; 16
     d70:	e1 f7       	brne	.-8      	; 0xd6a <CTRL_takeFirstPassword+0x24>
		UART_sendByte(READY_TO_RECEIVE);		/* Tell the other HMI controller than control micro-controller
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
															ready to receive the password */
		CTRL_receivePasswordByUART(confirmationPassword);		/*Receive the second password (confirmation password) from HMI ECU*/
     d78:	ce 01       	movw	r24, r28
     d7a:	02 96       	adiw	r24, 0x02	; 2
     d7c:	0e 94 1c 07 	call	0xe38	; 0xe38 <CTRL_receivePasswordByUART>

		verify = CTRL_verifyPassword(g_receivedPassword,confirmationPassword); /* check if the received passwords are identical */
     d80:	8e e7       	ldi	r24, 0x7E	; 126
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	9e 01       	movw	r18, r28
     d86:	2e 5f       	subi	r18, 0xFE	; 254
     d88:	3f 4f       	sbci	r19, 0xFF	; 255
     d8a:	b9 01       	movw	r22, r18
     d8c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CTRL_verifyPassword>
     d90:	89 83       	std	Y+1, r24	; 0x01

		if(verify == SUCCESS)
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	89 f4       	brne	.+34     	; 0xdba <CTRL_takeFirstPassword+0x74>
		{
			UART_sendByte(READY_TO_SEND);
     d98:	80 e1       	ldi	r24, 0x10	; 16
     d9a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
			UART_sendByte(PASSWORD_MATCHED); /* Send password matched to HMI ECU */
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
			CTRL_storePassword(); /* Store the password in EEPROM */
     da4:	0e 94 45 07 	call	0xe8a	; 0xe8a <CTRL_storePassword>
		{
			UART_sendByte(READY_TO_SEND);
			UART_sendByte(PASSWORD_UNMATCHED);	/* Send password unmatched to HMI ECU */
		}
	}
}
     da8:	26 96       	adiw	r28, 0x06	; 6
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret
			CTRL_storePassword(); /* Store the password in EEPROM */
			break; /* Exit from while loop */
		}
		else
		{
			UART_sendByte(READY_TO_SEND);
     dba:	80 e1       	ldi	r24, 0x10	; 16
     dbc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
			UART_sendByte(PASSWORD_UNMATCHED);	/* Send password unmatched to HMI ECU */
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
     dc6:	c6 cf       	rjmp	.-116    	; 0xd54 <CTRL_takeFirstPassword+0xe>

00000dc8 <CTRL_verifyPassword>:
 *
 * [Returns]: If the checked password true it returns SUCCCES other returns FAILED
 *
 ********************************************************************************************/
uint8 CTRL_verifyPassword(uint8 *a_firstPassword_Ptr, uint8 *a_secondPassword_Ptr)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	00 d0       	rcall	.+0      	; 0xdce <CTRL_verifyPassword+0x6>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <CTRL_verifyPassword+0x8>
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <CTRL_verifyPassword+0xa>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	7e 83       	std	Y+6, r23	; 0x06
     ddc:	6d 83       	std	Y+5, r22	; 0x05
	uint8 correctPassword = SUCCESS;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0; /* Counter for for-loop */
     de2:	19 82       	std	Y+1, r1	; 0x01

	CTRL_readStoredPassword(); /* To update the password with last stored password in EEPROM */
     de4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <CTRL_readStoredPassword>

	for(i = 0; i<PASSWORD_LENGTH; i++)
     de8:	19 82       	std	Y+1, r1	; 0x01
     dea:	19 c0       	rjmp	.+50     	; 0xe1e <CTRL_verifyPassword+0x56>
	{
		if(a_firstPassword_Ptr[i] != a_secondPassword_Ptr[i])
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	fc 01       	movw	r30, r24
     df8:	e2 0f       	add	r30, r18
     dfa:	f3 1f       	adc	r31, r19
     dfc:	40 81       	ld	r20, Z
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	fc 01       	movw	r30, r24
     e0a:	e2 0f       	add	r30, r18
     e0c:	f3 1f       	adc	r31, r19
     e0e:	80 81       	ld	r24, Z
     e10:	48 17       	cp	r20, r24
     e12:	11 f0       	breq	.+4      	; 0xe18 <CTRL_verifyPassword+0x50>
		{
			correctPassword = FAILED;
     e14:	1a 82       	std	Y+2, r1	; 0x02
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <CTRL_verifyPassword+0x5c>
	uint8 correctPassword = SUCCESS;
	uint8 i=0; /* Counter for for-loop */

	CTRL_readStoredPassword(); /* To update the password with last stored password in EEPROM */

	for(i = 0; i<PASSWORD_LENGTH; i++)
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	85 30       	cpi	r24, 0x05	; 5
     e22:	20 f3       	brcs	.-56     	; 0xdec <CTRL_verifyPassword+0x24>
		{
			correctPassword = FAILED;
			break; /* break from the loop when arrays elements not identical */
		}
	}
	return correctPassword;
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e26:	26 96       	adiw	r28, 0x06	; 6
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <CTRL_receivePasswordByUART>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void CTRL_receivePasswordByUART(uint8 *password_Ptr)
{
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <CTRL_receivePasswordByUART+0xa>
     e42:	0f 92       	push	r0
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	9b 83       	std	Y+3, r25	; 0x03
     e4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter; /* Counter to used in for loop */
	for(counter = 0; counter<PASSWORD_LENGTH; counter++)
     e4c:	19 82       	std	Y+1, r1	; 0x01
     e4e:	12 c0       	rjmp	.+36     	; 0xe74 <CTRL_receivePasswordByUART+0x3c>
	{
		UART_sendByte(READY_TO_RECEIVE);	/* Tell HMI ECU that control ECU ready to receive data */
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
		password_Ptr[counter] = UART_recieveByte(); 	/* Receive 1 Byte of the password from the HMI */
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	8c 01       	movw	r16, r24
     e62:	02 0f       	add	r16, r18
     e64:	13 1f       	adc	r17, r19
     e66:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_recieveByte>
     e6a:	f8 01       	movw	r30, r16
     e6c:	80 83       	st	Z, r24
 *
 ********************************************************************************************/
void CTRL_receivePasswordByUART(uint8 *password_Ptr)
{
	uint8 counter; /* Counter to used in for loop */
	for(counter = 0; counter<PASSWORD_LENGTH; counter++)
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	8f 5f       	subi	r24, 0xFF	; 255
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	85 30       	cpi	r24, 0x05	; 5
     e78:	58 f3       	brcs	.-42     	; 0xe50 <CTRL_receivePasswordByUART+0x18>
	{
		UART_sendByte(READY_TO_RECEIVE);	/* Tell HMI ECU that control ECU ready to receive data */
		password_Ptr[counter] = UART_recieveByte(); 	/* Receive 1 Byte of the password from the HMI */
	}
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	08 95       	ret

00000e8a <CTRL_storePassword>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void CTRL_storePassword(void)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	61 97       	sbiw	r28, 0x11	; 17
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
	uint8 counter;
	uint16 address = 0x0311;
     e9e:	81 e1       	ldi	r24, 0x11	; 17
     ea0:	93 e0       	ldi	r25, 0x03	; 3
     ea2:	98 8b       	std	Y+16, r25	; 0x10
     ea4:	8f 87       	std	Y+15, r24	; 0x0f
	for(counter = 0; counter<PASSWORD_LENGTH; counter++)
     ea6:	19 8a       	std	Y+17, r1	; 0x11
     ea8:	88 c0       	rjmp	.+272    	; 0xfba <CTRL_storePassword+0x130>
		 * In order to store array in EEPROM the address must be increment
		 * each time.
		 * In order to increment the address, making the address + counter
		 * to increment it each time by one location.
		 */
		EEPROM_writeByte(address + counter, g_receivedPassword[counter]);
     eaa:	89 89       	ldd	r24, Y+17	; 0x11
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb2:	98 89       	ldd	r25, Y+16	; 0x10
     eb4:	a9 01       	movw	r20, r18
     eb6:	48 0f       	add	r20, r24
     eb8:	59 1f       	adc	r21, r25
     eba:	89 89       	ldd	r24, Y+17	; 0x11
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	fc 01       	movw	r30, r24
     ec2:	e2 58       	subi	r30, 0x82	; 130
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	20 81       	ld	r18, Z
     ec8:	ca 01       	movw	r24, r20
     eca:	62 2f       	mov	r22, r18
     ecc:	0e 94 ab 08 	call	0x1156	; 0x1156 <EEPROM_writeByte>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a8 ec       	ldi	r26, 0xC8	; 200
     ed6:	b2 e4       	ldi	r27, 0x42	; 66
     ed8:	8b 87       	std	Y+11, r24	; 0x0b
     eda:	9c 87       	std	Y+12, r25	; 0x0c
     edc:	ad 87       	std	Y+13, r26	; 0x0d
     ede:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	4a e7       	ldi	r20, 0x7A	; 122
     eee:	53 e4       	ldi	r21, 0x43	; 67
     ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	8f 83       	std	Y+7, r24	; 0x07
     efa:	98 87       	std	Y+8, r25	; 0x08
     efc:	a9 87       	std	Y+9, r26	; 0x09
     efe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f00:	6f 81       	ldd	r22, Y+7	; 0x07
     f02:	78 85       	ldd	r23, Y+8	; 0x08
     f04:	89 85       	ldd	r24, Y+9	; 0x09
     f06:	9a 85       	ldd	r25, Y+10	; 0x0a
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	5f e3       	ldi	r21, 0x3F	; 63
     f10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f14:	88 23       	and	r24, r24
     f16:	2c f4       	brge	.+10     	; 0xf22 <CTRL_storePassword+0x98>
		__ticks = 1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9e 83       	std	Y+6, r25	; 0x06
     f1e:	8d 83       	std	Y+5, r24	; 0x05
     f20:	3f c0       	rjmp	.+126    	; 0xfa0 <CTRL_storePassword+0x116>
	else if (__tmp > 65535)
     f22:	6f 81       	ldd	r22, Y+7	; 0x07
     f24:	78 85       	ldd	r23, Y+8	; 0x08
     f26:	89 85       	ldd	r24, Y+9	; 0x09
     f28:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	4f e7       	ldi	r20, 0x7F	; 127
     f30:	57 e4       	ldi	r21, 0x47	; 71
     f32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f36:	18 16       	cp	r1, r24
     f38:	4c f5       	brge	.+82     	; 0xf8c <CTRL_storePassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f40:	9e 85       	ldd	r25, Y+14	; 0x0e
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e2       	ldi	r20, 0x20	; 32
     f48:	51 e4       	ldi	r21, 0x41	; 65
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	9e 83       	std	Y+6, r25	; 0x06
     f60:	8d 83       	std	Y+5, r24	; 0x05
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <CTRL_storePassword+0xf8>
     f64:	89 e1       	ldi	r24, 0x19	; 25
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9c 83       	std	Y+4, r25	; 0x04
     f6a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <CTRL_storePassword+0xe6>
     f74:	9c 83       	std	Y+4, r25	; 0x04
     f76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	9e 83       	std	Y+6, r25	; 0x06
     f80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	69 f7       	brne	.-38     	; 0xf64 <CTRL_storePassword+0xda>
     f8a:	14 c0       	rjmp	.+40     	; 0xfb4 <CTRL_storePassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8c:	6f 81       	ldd	r22, Y+7	; 0x07
     f8e:	78 85       	ldd	r23, Y+8	; 0x08
     f90:	89 85       	ldd	r24, Y+9	; 0x09
     f92:	9a 85       	ldd	r25, Y+10	; 0x0a
     f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	9e 83       	std	Y+6, r25	; 0x06
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	8d 81       	ldd	r24, Y+5	; 0x05
     fa2:	9e 81       	ldd	r25, Y+6	; 0x06
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <CTRL_storePassword+0x122>
     fb0:	9a 83       	std	Y+2, r25	; 0x02
     fb2:	89 83       	std	Y+1, r24	; 0x01
 ********************************************************************************************/
void CTRL_storePassword(void)
{
	uint8 counter;
	uint16 address = 0x0311;
	for(counter = 0; counter<PASSWORD_LENGTH; counter++)
     fb4:	89 89       	ldd	r24, Y+17	; 0x11
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	89 8b       	std	Y+17, r24	; 0x11
     fba:	89 89       	ldd	r24, Y+17	; 0x11
     fbc:	85 30       	cpi	r24, 0x05	; 5
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <CTRL_storePassword+0x138>
     fc0:	74 cf       	rjmp	.-280    	; 0xeaa <CTRL_storePassword+0x20>
		 */
		EEPROM_writeByte(address + counter, g_receivedPassword[counter]);
		/* delay time as the EEPROM take 10ms to make a write*/
		_delay_ms(100);		/* Give the EEPROM some time to store 1 Byte */
	}
}
     fc2:	61 96       	adiw	r28, 0x11	; 17
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <CTRL_readStoredPassword>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void CTRL_readStoredPassword(void)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <CTRL_readStoredPassword+0x6>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
	uint8 counter;
	uint16 address = 0x0311;
     fe0:	81 e1       	ldi	r24, 0x11	; 17
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01
	for(counter = 0; counter<PASSWORD_LENGTH; counter++)
     fe8:	1b 82       	std	Y+3, r1	; 0x03
     fea:	15 c0       	rjmp	.+42     	; 0x1016 <CTRL_readStoredPassword+0x42>
		/* Read 1 byte of the stored password from EEPROM and store it in global array
		 * g_storedPassword.
		 * In order to increment the address, making the address + counter
		 * to increment it each time by one location.
		 */
		EEPROM_readByte(address + counter, &g_storedPassword[counter]);
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	a9 01       	movw	r20, r18
     ff8:	48 0f       	add	r20, r24
     ffa:	59 1f       	adc	r21, r25
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9c 01       	movw	r18, r24
    1004:	2d 57       	subi	r18, 0x7D	; 125
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
    1008:	ca 01       	movw	r24, r20
    100a:	b9 01       	movw	r22, r18
    100c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <EEPROM_readByte>
 ********************************************************************************************/
void CTRL_readStoredPassword(void)
{
	uint8 counter;
	uint16 address = 0x0311;
	for(counter = 0; counter<PASSWORD_LENGTH; counter++)
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	8f 5f       	subi	r24, 0xFF	; 255
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	85 30       	cpi	r24, 0x05	; 5
    101a:	40 f3       	brcs	.-48     	; 0xfec <CTRL_readStoredPassword+0x18>
		 * In order to increment the address, making the address + counter
		 * to increment it each time by one location.
		 */
		EEPROM_readByte(address + counter, &g_storedPassword[counter]);
	}
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <CTRL_openingDoor>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void CTRL_openingDoor(void)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	/* Opening the Door:
	 * Rotate the motor Clockwise for 15 seconds
	 */
	g_seconds = 0;
    1030:	10 92 77 00 	sts	0x0077, r1
	DcMotor_Rotate(CW);
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DcMotor_Rotate>
	while(g_seconds != DOOR_UNLOCKED_PERIOD);
    103a:	80 91 77 00 	lds	r24, 0x0077
    103e:	8f 30       	cpi	r24, 0x0F	; 15
    1040:	e1 f7       	brne	.-8      	; 0x103a <CTRL_openingDoor+0x12>


	/* Hold the Door:
	 * Holding the motor clockwise for 3 seconds
	 */
	g_seconds = 0;
    1042:	10 92 77 00 	sts	0x0077, r1
	DcMotor_Rotate(STOP);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DcMotor_Rotate>
	while(g_seconds != DOOR_LEFT_OPEN_PERIOD);
    104c:	80 91 77 00 	lds	r24, 0x0077
    1050:	85 30       	cpi	r24, 0x05	; 5
    1052:	e1 f7       	brne	.-8      	; 0x104c <CTRL_openingDoor+0x24>

	/* Closing the Door:
	 * Rotate the motor Anti-Clockwise for 15 seconds
	 */
	g_seconds = 0;
    1054:	10 92 77 00 	sts	0x0077, r1
	DcMotor_Rotate(ACW);
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DcMotor_Rotate>
	while(g_seconds != DOOR_UNLOCKED_PERIOD);
    105e:	80 91 77 00 	lds	r24, 0x0077
    1062:	8f 30       	cpi	r24, 0x0F	; 15
    1064:	e1 f7       	brne	.-8      	; 0x105e <CTRL_openingDoor+0x36>

	DcMotor_Rotate(STOP);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	0e 94 60 08 	call	0x10c0	; 0x10c0 <DcMotor_Rotate>
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <Timer_CallBackFunction>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void Timer_CallBackFunction(void)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	/* Call back function for the timer (when timer count 1 second)
	 * the timer increment the global variable g_seconds every second */
	g_seconds++; /* Increment global second variable each time the interrupt fired */
    107a:	80 91 77 00 	lds	r24, 0x0077
    107e:	8f 5f       	subi	r24, 0xFF	; 255
    1080:	80 93 77 00 	sts	0x0077, r24
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <DcMotor_Init>:
 * Description:
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	/* configure pin of motors as output pins */
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_FIRST_PIN_ID,PIN_OUTPUT);
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	41 e0       	ldi	r20, 0x01	; 1
    1098:	0e 94 4c 09 	call	0x1298	; 0x1298 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_SECOND_PIN_ID,PIN_OUTPUT);
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	41 e0       	ldi	r20, 0x01	; 1
    10a2:	0e 94 4c 09 	call	0x1298	; 0x1298 <GPIO_setupPinDirection>
	/* Motor is stop at the beginning */
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	61 e0       	ldi	r22, 0x01	; 1
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
}
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <DcMotor_Rotate>:
/*
 * Description:
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 */
void DcMotor_Rotate(DcMotor_State state)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <DcMotor_Rotate+0x6>
    10c6:	0f 92       	push	r0
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3b 83       	std	Y+3, r19	; 0x03
    10d6:	2a 83       	std	Y+2, r18	; 0x02
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	9b 81       	ldd	r25, Y+3	; 0x03
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	f9 f0       	breq	.+62     	; 0x1120 <DcMotor_Rotate+0x60>
    10e2:	2a 81       	ldd	r18, Y+2	; 0x02
    10e4:	3b 81       	ldd	r19, Y+3	; 0x03
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	29 f1       	breq	.+74     	; 0x1136 <DcMotor_Rotate+0x76>
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	9b 81       	ldd	r25, Y+3	; 0x03
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	59 f0       	breq	.+22     	; 0x110a <DcMotor_Rotate+0x4a>
	{
	default:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
    1108:	20 c0       	rjmp	.+64     	; 0x114a <DcMotor_Rotate+0x8a>
		break;
	case STOP:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
    111e:	15 c0       	rjmp	.+42     	; 0x114a <DcMotor_Rotate+0x8a>
		break;
	case CW:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID,LOGIC_HIGH);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	41 e0       	ldi	r20, 0x01	; 1
    1126:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID,LOGIC_LOW);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
    1134:	0a c0       	rjmp	.+20     	; 0x114a <DcMotor_Rotate+0x8a>
		break;
	case ACW:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID,LOGIC_LOW);
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID,LOGIC_HIGH);
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	0e 94 37 0a 	call	0x146e	; 0x146e <GPIO_writePin>
		break;
	}
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <EEPROM_writeByte+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <EEPROM_writeByte+0x8>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1168:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    116c:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	11 f0       	breq	.+4      	; 0x1178 <EEPROM_writeByte+0x22>
        return ERROR;
    1174:	1c 82       	std	Y+4, r1	; 0x04
    1176:	28 c0       	rjmp	.+80     	; 0x11c8 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	80 70       	andi	r24, 0x00	; 0
    117e:	97 70       	andi	r25, 0x07	; 7
    1180:	88 0f       	add	r24, r24
    1182:	89 2f       	mov	r24, r25
    1184:	88 1f       	adc	r24, r24
    1186:	99 0b       	sbc	r25, r25
    1188:	91 95       	neg	r25
    118a:	80 6a       	ori	r24, 0xA0	; 160
    118c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1190:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    1194:	88 31       	cpi	r24, 0x18	; 24
    1196:	11 f0       	breq	.+4      	; 0x119c <EEPROM_writeByte+0x46>
        return ERROR; 
    1198:	1c 82       	std	Y+4, r1	; 0x04
    119a:	16 c0       	rjmp	.+44     	; 0x11c8 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11a2:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    11a6:	88 32       	cpi	r24, 0x28	; 40
    11a8:	11 f0       	breq	.+4      	; 0x11ae <EEPROM_writeByte+0x58>
        return ERROR;
    11aa:	1c 82       	std	Y+4, r1	; 0x04
    11ac:	0d c0       	rjmp	.+26     	; 0x11c8 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11b4:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    11b8:	88 32       	cpi	r24, 0x28	; 40
    11ba:	11 f0       	breq	.+4      	; 0x11c0 <EEPROM_writeByte+0x6a>
        return ERROR;
    11bc:	1c 82       	std	Y+4, r1	; 0x04
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    11c0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <TWI_stop>
	
    return SUCCESS;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	8c 83       	std	Y+4, r24	; 0x04
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <EEPROM_readByte+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <EEPROM_readByte+0x8>
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	7c 83       	std	Y+4, r23	; 0x04
    11ec:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11ee:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11f2:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    11f6:	88 30       	cpi	r24, 0x08	; 8
    11f8:	11 f0       	breq	.+4      	; 0x11fe <EEPROM_readByte+0x26>
        return ERROR;
    11fa:	1d 82       	std	Y+5, r1	; 0x05
    11fc:	44 c0       	rjmp	.+136    	; 0x1286 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	80 70       	andi	r24, 0x00	; 0
    1204:	97 70       	andi	r25, 0x07	; 7
    1206:	88 0f       	add	r24, r24
    1208:	89 2f       	mov	r24, r25
    120a:	88 1f       	adc	r24, r24
    120c:	99 0b       	sbc	r25, r25
    120e:	91 95       	neg	r25
    1210:	80 6a       	ori	r24, 0xA0	; 160
    1212:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1216:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    121a:	88 31       	cpi	r24, 0x18	; 24
    121c:	11 f0       	breq	.+4      	; 0x1222 <EEPROM_readByte+0x4a>
        return ERROR;
    121e:	1d 82       	std	Y+5, r1	; 0x05
    1220:	32 c0       	rjmp	.+100    	; 0x1286 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1228:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    122c:	88 32       	cpi	r24, 0x28	; 40
    122e:	11 f0       	breq	.+4      	; 0x1234 <EEPROM_readByte+0x5c>
        return ERROR;
    1230:	1d 82       	std	Y+5, r1	; 0x05
    1232:	29 c0       	rjmp	.+82     	; 0x1286 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1234:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1238:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    123c:	80 31       	cpi	r24, 0x10	; 16
    123e:	11 f0       	breq	.+4      	; 0x1244 <EEPROM_readByte+0x6c>
        return ERROR;
    1240:	1d 82       	std	Y+5, r1	; 0x05
    1242:	21 c0       	rjmp	.+66     	; 0x1286 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	80 70       	andi	r24, 0x00	; 0
    124a:	97 70       	andi	r25, 0x07	; 7
    124c:	88 0f       	add	r24, r24
    124e:	89 2f       	mov	r24, r25
    1250:	88 1f       	adc	r24, r24
    1252:	99 0b       	sbc	r25, r25
    1254:	91 95       	neg	r25
    1256:	81 6a       	ori	r24, 0xA1	; 161
    1258:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    125c:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    1260:	80 34       	cpi	r24, 0x40	; 64
    1262:	11 f0       	breq	.+4      	; 0x1268 <EEPROM_readByte+0x90>
        return ERROR;
    1264:	1d 82       	std	Y+5, r1	; 0x05
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1268:	0e 94 23 10 	call	0x2046	; 0x2046 <TWI_readByteWithNACK>
    126c:	eb 81       	ldd	r30, Y+3	; 0x03
    126e:	fc 81       	ldd	r31, Y+4	; 0x04
    1270:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1272:	0e 94 36 10 	call	0x206c	; 0x206c <TWI_getStatus>
    1276:	88 35       	cpi	r24, 0x58	; 88
    1278:	11 f0       	breq	.+4      	; 0x127e <EEPROM_readByte+0xa6>
        return ERROR;
    127a:	1d 82       	std	Y+5, r1	; 0x05
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    127e:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <TWI_stop>

    return SUCCESS;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <GPIO_setupPinDirection+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <GPIO_setupPinDirection+0x8>
    12a0:	0f 92       	push	r0
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	6a 83       	std	Y+2, r22	; 0x02
    12aa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 30       	cpi	r24, 0x08	; 8
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <GPIO_setupPinDirection+0x1c>
    12b2:	d5 c0       	rjmp	.+426    	; 0x145e <GPIO_setupPinDirection+0x1c6>
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <GPIO_setupPinDirection+0x24>
    12ba:	d1 c0       	rjmp	.+418    	; 0x145e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3d 83       	std	Y+5, r19	; 0x05
    12c4:	2c 83       	std	Y+4, r18	; 0x04
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <GPIO_setupPinDirection+0x3a>
    12d0:	43 c0       	rjmp	.+134    	; 0x1358 <GPIO_setupPinDirection+0xc0>
    12d2:	2c 81       	ldd	r18, Y+4	; 0x04
    12d4:	3d 81       	ldd	r19, Y+5	; 0x05
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	2c f4       	brge	.+10     	; 0x12e6 <GPIO_setupPinDirection+0x4e>
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	71 f0       	breq	.+28     	; 0x1300 <GPIO_setupPinDirection+0x68>
    12e4:	bc c0       	rjmp	.+376    	; 0x145e <GPIO_setupPinDirection+0x1c6>
    12e6:	2c 81       	ldd	r18, Y+4	; 0x04
    12e8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <GPIO_setupPinDirection+0x5a>
    12f0:	5f c0       	rjmp	.+190    	; 0x13b0 <GPIO_setupPinDirection+0x118>
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	09 f4       	brne	.+2      	; 0x12fe <GPIO_setupPinDirection+0x66>
    12fc:	85 c0       	rjmp	.+266    	; 0x1408 <GPIO_setupPinDirection+0x170>
    12fe:	af c0       	rjmp	.+350    	; 0x145e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	a1 f4       	brne	.+40     	; 0x132e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1306:	aa e3       	ldi	r26, 0x3A	; 58
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ea e3       	ldi	r30, 0x3A	; 58
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <GPIO_setupPinDirection+0x8c>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <GPIO_setupPinDirection+0x88>
    1328:	84 2b       	or	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	98 c0       	rjmp	.+304    	; 0x145e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    132e:	aa e3       	ldi	r26, 0x3A	; 58
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ea e3       	ldi	r30, 0x3A	; 58
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <GPIO_setupPinDirection+0xb4>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <GPIO_setupPinDirection+0xb0>
    1350:	80 95       	com	r24
    1352:	84 23       	and	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	83 c0       	rjmp	.+262    	; 0x145e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	a1 f4       	brne	.+40     	; 0x1386 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    135e:	a7 e3       	ldi	r26, 0x37	; 55
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e7 e3       	ldi	r30, 0x37	; 55
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <GPIO_setupPinDirection+0xe4>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <GPIO_setupPinDirection+0xe0>
    1380:	84 2b       	or	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	6c c0       	rjmp	.+216    	; 0x145e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1386:	a7 e3       	ldi	r26, 0x37	; 55
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e7 e3       	ldi	r30, 0x37	; 55
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <GPIO_setupPinDirection+0x10c>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <GPIO_setupPinDirection+0x108>
    13a8:	80 95       	com	r24
    13aa:	84 23       	and	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	57 c0       	rjmp	.+174    	; 0x145e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	a1 f4       	brne	.+40     	; 0x13de <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13b6:	a4 e3       	ldi	r26, 0x34	; 52
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e4 e3       	ldi	r30, 0x34	; 52
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <GPIO_setupPinDirection+0x13c>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <GPIO_setupPinDirection+0x138>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	40 c0       	rjmp	.+128    	; 0x145e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    13de:	a4 e3       	ldi	r26, 0x34	; 52
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e4 e3       	ldi	r30, 0x34	; 52
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <GPIO_setupPinDirection+0x164>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <GPIO_setupPinDirection+0x160>
    1400:	80 95       	com	r24
    1402:	84 23       	and	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	2b c0       	rjmp	.+86     	; 0x145e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	a1 f4       	brne	.+40     	; 0x1436 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    140e:	a1 e3       	ldi	r26, 0x31	; 49
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e1 e3       	ldi	r30, 0x31	; 49
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <GPIO_setupPinDirection+0x194>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <GPIO_setupPinDirection+0x190>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	14 c0       	rjmp	.+40     	; 0x145e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1436:	a1 e3       	ldi	r26, 0x31	; 49
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e1 e3       	ldi	r30, 0x31	; 49
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <GPIO_setupPinDirection+0x1bc>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <GPIO_setupPinDirection+0x1b8>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_writePin+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <GPIO_writePin+0x8>
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	6a 83       	std	Y+2, r22	; 0x02
    1480:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	88 30       	cpi	r24, 0x08	; 8
    1486:	08 f0       	brcs	.+2      	; 0x148a <GPIO_writePin+0x1c>
    1488:	d5 c0       	rjmp	.+426    	; 0x1634 <GPIO_writePin+0x1c6>
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	08 f0       	brcs	.+2      	; 0x1492 <GPIO_writePin+0x24>
    1490:	d1 c0       	rjmp	.+418    	; 0x1634 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3d 83       	std	Y+5, r19	; 0x05
    149a:	2c 83       	std	Y+4, r18	; 0x04
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9d 81       	ldd	r25, Y+5	; 0x05
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	91 05       	cpc	r25, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <GPIO_writePin+0x3a>
    14a6:	43 c0       	rjmp	.+134    	; 0x152e <GPIO_writePin+0xc0>
    14a8:	2c 81       	ldd	r18, Y+4	; 0x04
    14aa:	3d 81       	ldd	r19, Y+5	; 0x05
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	2c f4       	brge	.+10     	; 0x14bc <GPIO_writePin+0x4e>
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <GPIO_writePin+0x68>
    14ba:	bc c0       	rjmp	.+376    	; 0x1634 <GPIO_writePin+0x1c6>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <GPIO_writePin+0x5a>
    14c6:	5f c0       	rjmp	.+190    	; 0x1586 <GPIO_writePin+0x118>
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <GPIO_writePin+0x66>
    14d2:	85 c0       	rjmp	.+266    	; 0x15de <GPIO_writePin+0x170>
    14d4:	af c0       	rjmp	.+350    	; 0x1634 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	a1 f4       	brne	.+40     	; 0x1504 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    14dc:	ab e3       	ldi	r26, 0x3B	; 59
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	eb e3       	ldi	r30, 0x3B	; 59
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_writePin+0x8c>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_writePin+0x88>
    14fe:	84 2b       	or	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	98 c0       	rjmp	.+304    	; 0x1634 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1504:	ab e3       	ldi	r26, 0x3B	; 59
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_writePin+0xb4>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_writePin+0xb0>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	83 c0       	rjmp	.+262    	; 0x1634 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	a1 f4       	brne	.+40     	; 0x155c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1534:	a8 e3       	ldi	r26, 0x38	; 56
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e8 e3       	ldi	r30, 0x38	; 56
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_writePin+0xe4>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_writePin+0xe0>
    1556:	84 2b       	or	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	6c c0       	rjmp	.+216    	; 0x1634 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    155c:	a8 e3       	ldi	r26, 0x38	; 56
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e8 e3       	ldi	r30, 0x38	; 56
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_writePin+0x10c>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_writePin+0x108>
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	57 c0       	rjmp	.+174    	; 0x1634 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	a1 f4       	brne	.+40     	; 0x15b4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    158c:	a5 e3       	ldi	r26, 0x35	; 53
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e5 e3       	ldi	r30, 0x35	; 53
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <GPIO_writePin+0x13c>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <GPIO_writePin+0x138>
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	40 c0       	rjmp	.+128    	; 0x1634 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    15b4:	a5 e3       	ldi	r26, 0x35	; 53
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e3       	ldi	r30, 0x35	; 53
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <GPIO_writePin+0x164>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <GPIO_writePin+0x160>
    15d6:	80 95       	com	r24
    15d8:	84 23       	and	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	2b c0       	rjmp	.+86     	; 0x1634 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	a1 f4       	brne	.+40     	; 0x160c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    15e4:	a2 e3       	ldi	r26, 0x32	; 50
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e2 e3       	ldi	r30, 0x32	; 50
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <GPIO_writePin+0x194>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <GPIO_writePin+0x190>
    1606:	84 2b       	or	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    160c:	a2 e3       	ldi	r26, 0x32	; 50
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e2 e3       	ldi	r30, 0x32	; 50
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <GPIO_writePin+0x1bc>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <GPIO_writePin+0x1b8>
    162e:	80 95       	com	r24
    1630:	84 23       	and	r24, r20
    1632:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <GPIO_readPin+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <GPIO_readPin+0x8>
    164c:	0f 92       	push	r0
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1656:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 30       	cpi	r24, 0x08	; 8
    165c:	08 f0       	brcs	.+2      	; 0x1660 <GPIO_readPin+0x1c>
    165e:	84 c0       	rjmp	.+264    	; 0x1768 <GPIO_readPin+0x124>
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	84 30       	cpi	r24, 0x04	; 4
    1664:	08 f0       	brcs	.+2      	; 0x1668 <GPIO_readPin+0x24>
    1666:	80 c0       	rjmp	.+256    	; 0x1768 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 83       	std	Y+5, r19	; 0x05
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	4c 81       	ldd	r20, Y+4	; 0x04
    1674:	5d 81       	ldd	r21, Y+5	; 0x05
    1676:	41 30       	cpi	r20, 0x01	; 1
    1678:	51 05       	cpc	r21, r1
    167a:	79 f1       	breq	.+94     	; 0x16da <GPIO_readPin+0x96>
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	91 05       	cpc	r25, r1
    1684:	34 f4       	brge	.+12     	; 0x1692 <GPIO_readPin+0x4e>
    1686:	2c 81       	ldd	r18, Y+4	; 0x04
    1688:	3d 81       	ldd	r19, Y+5	; 0x05
    168a:	21 15       	cp	r18, r1
    168c:	31 05       	cpc	r19, r1
    168e:	69 f0       	breq	.+26     	; 0x16aa <GPIO_readPin+0x66>
    1690:	6b c0       	rjmp	.+214    	; 0x1768 <GPIO_readPin+0x124>
    1692:	4c 81       	ldd	r20, Y+4	; 0x04
    1694:	5d 81       	ldd	r21, Y+5	; 0x05
    1696:	42 30       	cpi	r20, 0x02	; 2
    1698:	51 05       	cpc	r21, r1
    169a:	b9 f1       	breq	.+110    	; 0x170a <GPIO_readPin+0xc6>
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <GPIO_readPin+0x64>
    16a6:	49 c0       	rjmp	.+146    	; 0x173a <GPIO_readPin+0xf6>
    16a8:	5f c0       	rjmp	.+190    	; 0x1768 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    16aa:	e9 e3       	ldi	r30, 0x39	; 57
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a9 01       	movw	r20, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_readPin+0x7e>
    16be:	55 95       	asr	r21
    16c0:	47 95       	ror	r20
    16c2:	8a 95       	dec	r24
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_readPin+0x7a>
    16c6:	ca 01       	movw	r24, r20
    16c8:	81 70       	andi	r24, 0x01	; 1
    16ca:	90 70       	andi	r25, 0x00	; 0
    16cc:	88 23       	and	r24, r24
    16ce:	19 f0       	breq	.+6      	; 0x16d6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	49 c0       	rjmp	.+146    	; 0x1768 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16d6:	19 82       	std	Y+1, r1	; 0x01
    16d8:	47 c0       	rjmp	.+142    	; 0x1768 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    16da:	e6 e3       	ldi	r30, 0x36	; 54
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a9 01       	movw	r20, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_readPin+0xae>
    16ee:	55 95       	asr	r21
    16f0:	47 95       	ror	r20
    16f2:	8a 95       	dec	r24
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_readPin+0xaa>
    16f6:	ca 01       	movw	r24, r20
    16f8:	81 70       	andi	r24, 0x01	; 1
    16fa:	90 70       	andi	r25, 0x00	; 0
    16fc:	88 23       	and	r24, r24
    16fe:	19 f0       	breq	.+6      	; 0x1706 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	31 c0       	rjmp	.+98     	; 0x1768 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	2f c0       	rjmp	.+94     	; 0x1768 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    170a:	e3 e3       	ldi	r30, 0x33	; 51
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a9 01       	movw	r20, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GPIO_readPin+0xde>
    171e:	55 95       	asr	r21
    1720:	47 95       	ror	r20
    1722:	8a 95       	dec	r24
    1724:	e2 f7       	brpl	.-8      	; 0x171e <GPIO_readPin+0xda>
    1726:	ca 01       	movw	r24, r20
    1728:	81 70       	andi	r24, 0x01	; 1
    172a:	90 70       	andi	r25, 0x00	; 0
    172c:	88 23       	and	r24, r24
    172e:	19 f0       	breq	.+6      	; 0x1736 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	19 c0       	rjmp	.+50     	; 0x1768 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1736:	19 82       	std	Y+1, r1	; 0x01
    1738:	17 c0       	rjmp	.+46     	; 0x1768 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    173a:	e0 e3       	ldi	r30, 0x30	; 48
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a9 01       	movw	r20, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <GPIO_readPin+0x10e>
    174e:	55 95       	asr	r21
    1750:	47 95       	ror	r20
    1752:	8a 95       	dec	r24
    1754:	e2 f7       	brpl	.-8      	; 0x174e <GPIO_readPin+0x10a>
    1756:	ca 01       	movw	r24, r20
    1758:	81 70       	andi	r24, 0x01	; 1
    175a:	90 70       	andi	r25, 0x00	; 0
    175c:	88 23       	and	r24, r24
    175e:	19 f0       	breq	.+6      	; 0x1766 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1766:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <GPIO_setupPortDirection+0x6>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <GPIO_setupPortDirection+0x8>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	84 30       	cpi	r24, 0x04	; 4
    178e:	90 f5       	brcc	.+100    	; 0x17f4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	3c 83       	std	Y+4, r19	; 0x04
    1798:	2b 83       	std	Y+3, r18	; 0x03
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	91 05       	cpc	r25, r1
    17a2:	d1 f0       	breq	.+52     	; 0x17d8 <GPIO_setupPortDirection+0x5e>
    17a4:	2b 81       	ldd	r18, Y+3	; 0x03
    17a6:	3c 81       	ldd	r19, Y+4	; 0x04
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <GPIO_setupPortDirection+0x3e>
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	61 f0       	breq	.+24     	; 0x17ce <GPIO_setupPortDirection+0x54>
    17b6:	1e c0       	rjmp	.+60     	; 0x17f4 <GPIO_setupPortDirection+0x7a>
    17b8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ba:	3c 81       	ldd	r19, Y+4	; 0x04
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	81 f0       	breq	.+32     	; 0x17e2 <GPIO_setupPortDirection+0x68>
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	83 30       	cpi	r24, 0x03	; 3
    17c8:	91 05       	cpc	r25, r1
    17ca:	81 f0       	breq	.+32     	; 0x17ec <GPIO_setupPortDirection+0x72>
    17cc:	13 c0       	rjmp	.+38     	; 0x17f4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17ce:	ea e3       	ldi	r30, 0x3A	; 58
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	80 83       	st	Z, r24
    17d6:	0e c0       	rjmp	.+28     	; 0x17f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    17d8:	e7 e3       	ldi	r30, 0x37	; 55
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	80 83       	st	Z, r24
    17e0:	09 c0       	rjmp	.+18     	; 0x17f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    17e2:	e4 e3       	ldi	r30, 0x34	; 52
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	80 83       	st	Z, r24
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    17ec:	e1 e3       	ldi	r30, 0x31	; 49
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <GPIO_writePort+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <GPIO_writePort+0x8>
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	84 30       	cpi	r24, 0x04	; 4
    1816:	90 f5       	brcc	.+100    	; 0x187c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	3c 83       	std	Y+4, r19	; 0x04
    1820:	2b 83       	std	Y+3, r18	; 0x03
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	91 05       	cpc	r25, r1
    182a:	d1 f0       	breq	.+52     	; 0x1860 <GPIO_writePort+0x5e>
    182c:	2b 81       	ldd	r18, Y+3	; 0x03
    182e:	3c 81       	ldd	r19, Y+4	; 0x04
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	2c f4       	brge	.+10     	; 0x1840 <GPIO_writePort+0x3e>
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	61 f0       	breq	.+24     	; 0x1856 <GPIO_writePort+0x54>
    183e:	1e c0       	rjmp	.+60     	; 0x187c <GPIO_writePort+0x7a>
    1840:	2b 81       	ldd	r18, Y+3	; 0x03
    1842:	3c 81       	ldd	r19, Y+4	; 0x04
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	81 f0       	breq	.+32     	; 0x186a <GPIO_writePort+0x68>
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	91 05       	cpc	r25, r1
    1852:	81 f0       	breq	.+32     	; 0x1874 <GPIO_writePort+0x72>
    1854:	13 c0       	rjmp	.+38     	; 0x187c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1856:	eb e3       	ldi	r30, 0x3B	; 59
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	80 83       	st	Z, r24
    185e:	0e c0       	rjmp	.+28     	; 0x187c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1860:	e8 e3       	ldi	r30, 0x38	; 56
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	80 83       	st	Z, r24
    1868:	09 c0       	rjmp	.+18     	; 0x187c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    186a:	e5 e3       	ldi	r30, 0x35	; 53
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	80 83       	st	Z, r24
    1872:	04 c0       	rjmp	.+8      	; 0x187c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1874:	e2 e3       	ldi	r30, 0x32	; 50
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	80 83       	st	Z, r24
			break;
		}
	}
}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <GPIO_readPort+0x6>
    1890:	00 d0       	rcall	.+0      	; 0x1892 <GPIO_readPort+0x8>
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1898:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	90 f5       	brcc	.+100    	; 0x1904 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	3c 83       	std	Y+4, r19	; 0x04
    18a8:	2b 83       	std	Y+3, r18	; 0x03
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	91 05       	cpc	r25, r1
    18b2:	d1 f0       	breq	.+52     	; 0x18e8 <GPIO_readPort+0x5e>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	3c 81       	ldd	r19, Y+4	; 0x04
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <GPIO_readPort+0x3e>
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	61 f0       	breq	.+24     	; 0x18de <GPIO_readPort+0x54>
    18c6:	1e c0       	rjmp	.+60     	; 0x1904 <GPIO_readPort+0x7a>
    18c8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ca:	3c 81       	ldd	r19, Y+4	; 0x04
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	81 f0       	breq	.+32     	; 0x18f2 <GPIO_readPort+0x68>
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	83 30       	cpi	r24, 0x03	; 3
    18d8:	91 05       	cpc	r25, r1
    18da:	81 f0       	breq	.+32     	; 0x18fc <GPIO_readPort+0x72>
    18dc:	13 c0       	rjmp	.+38     	; 0x1904 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    18de:	e9 e3       	ldi	r30, 0x39	; 57
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	0e c0       	rjmp	.+28     	; 0x1904 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    18e8:	e6 e3       	ldi	r30, 0x36	; 54
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	09 c0       	rjmp	.+18     	; 0x1904 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    18f2:	e3 e3       	ldi	r30, 0x33	; 51
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    18fc:	e0 e3       	ldi	r30, 0x30	; 48
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1904:	89 81       	ldd	r24, Y+1	; 0x01
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <__vector_9>:
 *                       		Interrupt Service Routines                              *
 ****************************************************************************************/

/*------------------------------------ Timer 0 ISR -------------------------------------*/
ISR(TIMER0_OVF_vect)
{
    1914:	1f 92       	push	r1
    1916:	0f 92       	push	r0
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	0f 92       	push	r0
    191c:	11 24       	eor	r1, r1
    191e:	2f 93       	push	r18
    1920:	3f 93       	push	r19
    1922:	4f 93       	push	r20
    1924:	5f 93       	push	r21
    1926:	6f 93       	push	r22
    1928:	7f 93       	push	r23
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	af 93       	push	r26
    1930:	bf 93       	push	r27
    1932:	ef 93       	push	r30
    1934:	ff 93       	push	r31
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer0 != NULL_PTR)
    193e:	80 91 78 00 	lds	r24, 0x0078
    1942:	90 91 79 00 	lds	r25, 0x0079
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	29 f0       	breq	.+10     	; 0x1954 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow has been done */
		(*g_callBackPtrTimer0)();
    194a:	e0 91 78 00 	lds	r30, 0x0078
    194e:	f0 91 79 00 	lds	r31, 0x0079
    1952:	09 95       	icall
	}
}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	ff 91       	pop	r31
    195a:	ef 91       	pop	r30
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	7f 91       	pop	r23
    1966:	6f 91       	pop	r22
    1968:	5f 91       	pop	r21
    196a:	4f 91       	pop	r20
    196c:	3f 91       	pop	r19
    196e:	2f 91       	pop	r18
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    197a:	1f 92       	push	r1
    197c:	0f 92       	push	r0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	0f 92       	push	r0
    1982:	11 24       	eor	r1, r1
    1984:	2f 93       	push	r18
    1986:	3f 93       	push	r19
    1988:	4f 93       	push	r20
    198a:	5f 93       	push	r21
    198c:	6f 93       	push	r22
    198e:	7f 93       	push	r23
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	af 93       	push	r26
    1996:	bf 93       	push	r27
    1998:	ef 93       	push	r30
    199a:	ff 93       	push	r31
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer0 != NULL_PTR)
    19a4:	80 91 78 00 	lds	r24, 0x0078
    19a8:	90 91 79 00 	lds	r25, 0x0079
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	29 f0       	breq	.+10     	; 0x19ba <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare match has been occurred */
		(*g_callBackPtrTimer0)();
    19b0:	e0 91 78 00 	lds	r30, 0x0078
    19b4:	f0 91 79 00 	lds	r31, 0x0079
    19b8:	09 95       	icall
	}
}
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	ff 91       	pop	r31
    19c0:	ef 91       	pop	r30
    19c2:	bf 91       	pop	r27
    19c4:	af 91       	pop	r26
    19c6:	9f 91       	pop	r25
    19c8:	8f 91       	pop	r24
    19ca:	7f 91       	pop	r23
    19cc:	6f 91       	pop	r22
    19ce:	5f 91       	pop	r21
    19d0:	4f 91       	pop	r20
    19d2:	3f 91       	pop	r19
    19d4:	2f 91       	pop	r18
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	0f 90       	pop	r0
    19dc:	1f 90       	pop	r1
    19de:	18 95       	reti

000019e0 <__vector_8>:


/*------------------------------------ Timer 1 ISR -------------------------------------*/

ISR(TIMER1_OVF_vect)
{
    19e0:	1f 92       	push	r1
    19e2:	0f 92       	push	r0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	0f 92       	push	r0
    19e8:	11 24       	eor	r1, r1
    19ea:	2f 93       	push	r18
    19ec:	3f 93       	push	r19
    19ee:	4f 93       	push	r20
    19f0:	5f 93       	push	r21
    19f2:	6f 93       	push	r22
    19f4:	7f 93       	push	r23
    19f6:	8f 93       	push	r24
    19f8:	9f 93       	push	r25
    19fa:	af 93       	push	r26
    19fc:	bf 93       	push	r27
    19fe:	ef 93       	push	r30
    1a00:	ff 93       	push	r31
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer1 != NULL_PTR)
    1a0a:	80 91 7a 00 	lds	r24, 0x007A
    1a0e:	90 91 7b 00 	lds	r25, 0x007B
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	29 f0       	breq	.+10     	; 0x1a20 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the overflow has been done */
		(g_callBackPtrTimer1)();
    1a16:	e0 91 7a 00 	lds	r30, 0x007A
    1a1a:	f0 91 7b 00 	lds	r31, 0x007B
    1a1e:	09 95       	icall
	}
}
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	ff 91       	pop	r31
    1a26:	ef 91       	pop	r30
    1a28:	bf 91       	pop	r27
    1a2a:	af 91       	pop	r26
    1a2c:	9f 91       	pop	r25
    1a2e:	8f 91       	pop	r24
    1a30:	7f 91       	pop	r23
    1a32:	6f 91       	pop	r22
    1a34:	5f 91       	pop	r21
    1a36:	4f 91       	pop	r20
    1a38:	3f 91       	pop	r19
    1a3a:	2f 91       	pop	r18
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer1 != NULL_PTR)
    1a70:	80 91 7a 00 	lds	r24, 0x007A
    1a74:	90 91 7b 00 	lds	r25, 0x007B
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	29 f0       	breq	.+10     	; 0x1a86 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the compare match has been occurred */
		(g_callBackPtrTimer1)();
    1a7c:	e0 91 7a 00 	lds	r30, 0x007A
    1a80:	f0 91 7b 00 	lds	r31, 0x007B
    1a84:	09 95       	icall
	}
}
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	ff 91       	pop	r31
    1a8c:	ef 91       	pop	r30
    1a8e:	bf 91       	pop	r27
    1a90:	af 91       	pop	r26
    1a92:	9f 91       	pop	r25
    1a94:	8f 91       	pop	r24
    1a96:	7f 91       	pop	r23
    1a98:	6f 91       	pop	r22
    1a9a:	5f 91       	pop	r21
    1a9c:	4f 91       	pop	r20
    1a9e:	3f 91       	pop	r19
    1aa0:	2f 91       	pop	r18
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	0f 90       	pop	r0
    1aa8:	1f 90       	pop	r1
    1aaa:	18 95       	reti

00001aac <__vector_4>:


/*------------------------------------ Timer 2 ISR -------------------------------------*/

ISR(TIMER2_OVF_vect)
{
    1aac:	1f 92       	push	r1
    1aae:	0f 92       	push	r0
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	2f 93       	push	r18
    1ab8:	3f 93       	push	r19
    1aba:	4f 93       	push	r20
    1abc:	5f 93       	push	r21
    1abe:	6f 93       	push	r22
    1ac0:	7f 93       	push	r23
    1ac2:	8f 93       	push	r24
    1ac4:	9f 93       	push	r25
    1ac6:	af 93       	push	r26
    1ac8:	bf 93       	push	r27
    1aca:	ef 93       	push	r30
    1acc:	ff 93       	push	r31
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer2 != NULL_PTR)
    1ad6:	80 91 7c 00 	lds	r24, 0x007C
    1ada:	90 91 7d 00 	lds	r25, 0x007D
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	29 f0       	breq	.+10     	; 0x1aec <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the overflow has been done */
		(g_callBackPtrTimer2)();
    1ae2:	e0 91 7c 00 	lds	r30, 0x007C
    1ae6:	f0 91 7d 00 	lds	r31, 0x007D
    1aea:	09 95       	icall
	}
}
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	ff 91       	pop	r31
    1af2:	ef 91       	pop	r30
    1af4:	bf 91       	pop	r27
    1af6:	af 91       	pop	r26
    1af8:	9f 91       	pop	r25
    1afa:	8f 91       	pop	r24
    1afc:	7f 91       	pop	r23
    1afe:	6f 91       	pop	r22
    1b00:	5f 91       	pop	r21
    1b02:	4f 91       	pop	r20
    1b04:	3f 91       	pop	r19
    1b06:	2f 91       	pop	r18
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	0f 90       	pop	r0
    1b0e:	1f 90       	pop	r1
    1b10:	18 95       	reti

00001b12 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1b12:	1f 92       	push	r1
    1b14:	0f 92       	push	r0
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	0f 92       	push	r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	4f 93       	push	r20
    1b22:	5f 93       	push	r21
    1b24:	6f 93       	push	r22
    1b26:	7f 93       	push	r23
    1b28:	8f 93       	push	r24
    1b2a:	9f 93       	push	r25
    1b2c:	af 93       	push	r26
    1b2e:	bf 93       	push	r27
    1b30:	ef 93       	push	r30
    1b32:	ff 93       	push	r31
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTimer2 != NULL_PTR)
    1b3c:	80 91 7c 00 	lds	r24, 0x007C
    1b40:	90 91 7d 00 	lds	r25, 0x007D
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	29 f0       	breq	.+10     	; 0x1b52 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the compare match has been occurred */
		(g_callBackPtrTimer2)();
    1b48:	e0 91 7c 00 	lds	r30, 0x007C
    1b4c:	f0 91 7d 00 	lds	r31, 0x007D
    1b50:	09 95       	icall
	}
}
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	ff 91       	pop	r31
    1b58:	ef 91       	pop	r30
    1b5a:	bf 91       	pop	r27
    1b5c:	af 91       	pop	r26
    1b5e:	9f 91       	pop	r25
    1b60:	8f 91       	pop	r24
    1b62:	7f 91       	pop	r23
    1b64:	6f 91       	pop	r22
    1b66:	5f 91       	pop	r21
    1b68:	4f 91       	pop	r20
    1b6a:	3f 91       	pop	r19
    1b6c:	2f 91       	pop	r18
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <Timer_init>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void Timer_init(const Timer_ConfigType *Config_Ptr)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <Timer_init+0x6>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <Timer_init+0x8>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr -> Timer_ID)
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	80 81       	ld	r24, Z
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	3c 83       	std	Y+4, r19	; 0x04
    1b94:	2b 83       	std	Y+3, r18	; 0x03
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <Timer_init+0x2a>
    1ba0:	59 c0       	rjmp	.+178    	; 0x1c54 <Timer_init+0xdc>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <Timer_init+0x36>
    1bac:	b2 c0       	rjmp	.+356    	; 0x1d12 <Timer_init+0x19a>
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <Timer_init+0x40>
    1bb6:	f9 c0       	rjmp	.+498    	; 0x1daa <Timer_init+0x232>
	{
	/*---------------------------------------Timer 0 --------------------------------------*/
	case TIMER0:
		/* Timer 0 Normal mode */
		if(Config_Ptr->timer_mode == NORMAL)
    1bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bba:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbc:	81 81       	ldd	r24, Z+1	; 0x01
    1bbe:	88 23       	and	r24, r24
    1bc0:	f1 f4       	brne	.+60     	; 0x1bfe <Timer_init+0x86>
			 * => TCNT0 register:
			 * 5. Insert the initial value that you want the timer to start from it.
			 * => TIMSK Register:
			 * 6. Enable Overflow interrupt (TOIE0)
			 */
			TCCR0 = (1<<FOC0);
    1bc2:	e3 e5       	ldi	r30, 0x53	; 83
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 e8       	ldi	r24, 0x80	; 128
    1bc8:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_Prescaler);
    1bca:	a3 e5       	ldi	r26, 0x53	; 83
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e3 e5       	ldi	r30, 0x53	; 83
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	98 2f       	mov	r25, r24
    1bd6:	98 7f       	andi	r25, 0xF8	; 248
    1bd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bda:	fa 81       	ldd	r31, Y+2	; 0x02
    1bdc:	85 81       	ldd	r24, Z+5	; 0x05
    1bde:	89 2b       	or	r24, r25
    1be0:	8c 93       	st	X, r24
			TCNT0 = (Config_Ptr->intialValue) & 0xFF;	/* In order to ensure that the register not exceeding his maximum value (255) */
    1be2:	a2 e5       	ldi	r26, 0x52	; 82
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e9 81       	ldd	r30, Y+1	; 0x01
    1be8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE0);
    1bee:	a9 e5       	ldi	r26, 0x59	; 89
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e9 e5       	ldi	r30, 0x59	; 89
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	81 60       	ori	r24, 0x01	; 1
    1bfa:	8c 93       	st	X, r24
    1bfc:	d6 c0       	rjmp	.+428    	; 0x1daa <Timer_init+0x232>
		}	/* End of Timer 0 Normal Mode */

		else if(Config_Ptr->timer_mode == COMPARE)
    1bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1c00:	fa 81       	ldd	r31, Y+2	; 0x02
    1c02:	81 81       	ldd	r24, Z+1	; 0x01
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <Timer_init+0x92>
    1c08:	d0 c0       	rjmp	.+416    	; 0x1daa <Timer_init+0x232>
			 * => TCNT0 register:
			 * 4. Insert the initial value that you want the timer to start from it.
			 * => TIMSK Register:
			 * 5. Enable Compare match interrupt (OCIE0) in TIMSK register
			 */
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    1c0a:	e3 e5       	ldi	r30, 0x53	; 83
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	88 e8       	ldi	r24, 0x88	; 136
    1c10:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_Prescaler);
    1c12:	a3 e5       	ldi	r26, 0x53	; 83
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e3 e5       	ldi	r30, 0x53	; 83
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	98 7f       	andi	r25, 0xF8	; 248
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	85 81       	ldd	r24, Z+5	; 0x05
    1c26:	89 2b       	or	r24, r25
    1c28:	8c 93       	st	X, r24
			TCNT0 = (Config_Ptr->intialValue) & 0xFF;	/* In order to ensure that the register not exceeding his maximum value (255) */
    1c2a:	a2 e5       	ldi	r26, 0x52	; 82
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c30:	fa 81       	ldd	r31, Y+2	; 0x02
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	8c 93       	st	X, r24
			OCR0 = (Config_Ptr->compareValue) & 0xFF;
    1c36:	ac e5       	ldi	r26, 0x5C	; 92
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3e:	83 81       	ldd	r24, Z+3	; 0x03
    1c40:	94 81       	ldd	r25, Z+4	; 0x04
    1c42:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0);
    1c44:	a9 e5       	ldi	r26, 0x59	; 89
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e9 e5       	ldi	r30, 0x59	; 89
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	82 60       	ori	r24, 0x02	; 2
    1c50:	8c 93       	st	X, r24
    1c52:	ab c0       	rjmp	.+342    	; 0x1daa <Timer_init+0x232>
		break;			/* End of Timer 0 */

		/*---------------------------------------Timer 1 --------------------------------------*/
	case TIMER1:
		/* Timer 1 Modes */
		if(Config_Ptr->timer_mode == NORMAL)
    1c54:	e9 81       	ldd	r30, Y+1	; 0x01
    1c56:	fa 81       	ldd	r31, Y+2	; 0x02
    1c58:	81 81       	ldd	r24, Z+1	; 0x01
    1c5a:	88 23       	and	r24, r24
    1c5c:	11 f5       	brne	.+68     	; 0x1ca2 <Timer_init+0x12a>
			 * => TCNT1 Register:
			 * 6. Insert the initial value that you want the timer to start from it.
			 * => TIMSK Register:
			 * 7. Enable Overflow interrupt (TOIE1)
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1c5e:	ef e4       	ldi	r30, 0x4F	; 79
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	8c e0       	ldi	r24, 0x0C	; 12
    1c64:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_Prescaler);
    1c66:	ae e4       	ldi	r26, 0x4E	; 78
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ee e4       	ldi	r30, 0x4E	; 78
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	98 2f       	mov	r25, r24
    1c72:	98 7f       	andi	r25, 0xF8	; 248
    1c74:	e9 81       	ldd	r30, Y+1	; 0x01
    1c76:	fa 81       	ldd	r31, Y+2	; 0x02
    1c78:	85 81       	ldd	r24, Z+5	; 0x05
    1c7a:	89 2b       	or	r24, r25
    1c7c:	8c 93       	st	X, r24
			TCNT1 = (Config_Ptr->intialValue) & 0xFFFF;	/* In order to ensure that the register not exceeding his maximum value (65,535) */
    1c7e:	ac e4       	ldi	r26, 0x4C	; 76
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e9 81       	ldd	r30, Y+1	; 0x01
    1c84:	fa 81       	ldd	r31, Y+2	; 0x02
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	11 96       	adiw	r26, 0x01	; 1
    1c8e:	9c 93       	st	X, r25
    1c90:	8e 93       	st	-X, r24
			TIMSK |= (1<<TOIE1);
    1c92:	a9 e5       	ldi	r26, 0x59	; 89
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e9 e5       	ldi	r30, 0x59	; 89
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	84 60       	ori	r24, 0x04	; 4
    1c9e:	8c 93       	st	X, r24
    1ca0:	84 c0       	rjmp	.+264    	; 0x1daa <Timer_init+0x232>
		}	/* End of Timer 1 Normal Mode */
		else if(Config_Ptr->timer_mode == COMPARE)
    1ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca6:	81 81       	ldd	r24, Z+1	; 0x01
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	09 f0       	breq	.+2      	; 0x1cae <Timer_init+0x136>
    1cac:	7e c0       	rjmp	.+252    	; 0x1daa <Timer_init+0x232>
			 * 3. CTC Mode WGM13=0, WGM12=1
			 * 4. Insert the required clock in (CS12, CS11, CS10) bits.
			 * => TIMSK Register:
			 * 5. Enable Compare match interrupt (OCIE1A) in TIMSK register
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1cae:	ef e4       	ldi	r30, 0x4F	; 79
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8c e0       	ldi	r24, 0x0C	; 12
    1cb4:	80 83       	st	Z, r24
			TCCR1B |= (1<<WGM12);
    1cb6:	ae e4       	ldi	r26, 0x4E	; 78
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ee e4       	ldi	r30, 0x4E	; 78
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	88 60       	ori	r24, 0x08	; 8
    1cc2:	8c 93       	st	X, r24
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_Prescaler);
    1cc4:	ae e4       	ldi	r26, 0x4E	; 78
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	ee e4       	ldi	r30, 0x4E	; 78
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	98 2f       	mov	r25, r24
    1cd0:	98 7f       	andi	r25, 0xF8	; 248
    1cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd6:	85 81       	ldd	r24, Z+5	; 0x05
    1cd8:	89 2b       	or	r24, r25
    1cda:	8c 93       	st	X, r24
			TCNT1 = (Config_Ptr->intialValue) & 0xFFFF;	/* In order to ensure that the register not exceeding his maximum value (255) */
    1cdc:	ac e4       	ldi	r26, 0x4C	; 76
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	11 96       	adiw	r26, 0x01	; 1
    1cec:	9c 93       	st	X, r25
    1cee:	8e 93       	st	-X, r24
			OCR1A = (Config_Ptr->compareValue) & 0xFFFF;
    1cf0:	aa e4       	ldi	r26, 0x4A	; 74
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf8:	83 81       	ldd	r24, Z+3	; 0x03
    1cfa:	94 81       	ldd	r25, Z+4	; 0x04
    1cfc:	11 96       	adiw	r26, 0x01	; 1
    1cfe:	9c 93       	st	X, r25
    1d00:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A);
    1d02:	a9 e5       	ldi	r26, 0x59	; 89
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e9 e5       	ldi	r30, 0x59	; 89
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 61       	ori	r24, 0x10	; 16
    1d0e:	8c 93       	st	X, r24
    1d10:	4c c0       	rjmp	.+152    	; 0x1daa <Timer_init+0x232>
		break;		/* End of Timer 1 */

		/*---------------------------------------Timer 2 --------------------------------------*/
	case TIMER2:
		/* Timer 2 Normal mode */
		if(Config_Ptr->timer_mode == NORMAL)
    1d12:	e9 81       	ldd	r30, Y+1	; 0x01
    1d14:	fa 81       	ldd	r31, Y+2	; 0x02
    1d16:	81 81       	ldd	r24, Z+1	; 0x01
    1d18:	88 23       	and	r24, r24
    1d1a:	f1 f4       	brne	.+60     	; 0x1d58 <Timer_init+0x1e0>
			 * => TCNT2 Register:
			 * 4. Insert the initial value that you want the timer to start from it.
			 * => TIMSK Register:
			 * 5. Enable Overflow interrupt (TOIE2)
			 */
			TCCR2 = (1<<FOC2);
    1d1c:	e5 e4       	ldi	r30, 0x45	; 69
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 e8       	ldi	r24, 0x80	; 128
    1d22:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_Prescaler);
    1d24:	a5 e4       	ldi	r26, 0x45	; 69
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e5 e4       	ldi	r30, 0x45	; 69
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	98 2f       	mov	r25, r24
    1d30:	98 7f       	andi	r25, 0xF8	; 248
    1d32:	e9 81       	ldd	r30, Y+1	; 0x01
    1d34:	fa 81       	ldd	r31, Y+2	; 0x02
    1d36:	85 81       	ldd	r24, Z+5	; 0x05
    1d38:	89 2b       	or	r24, r25
    1d3a:	8c 93       	st	X, r24
			TCNT2 = (Config_Ptr->intialValue) & 0xFF;	/* In order to ensure that the register not exceeding his maximum value (255) */
    1d3c:	a4 e4       	ldi	r26, 0x44	; 68
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e9 81       	ldd	r30, Y+1	; 0x01
    1d42:	fa 81       	ldd	r31, Y+2	; 0x02
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE2);
    1d48:	a9 e5       	ldi	r26, 0x59	; 89
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e9 e5       	ldi	r30, 0x59	; 89
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	80 64       	ori	r24, 0x40	; 64
    1d54:	8c 93       	st	X, r24
    1d56:	29 c0       	rjmp	.+82     	; 0x1daa <Timer_init+0x232>
		}	/* End of Timer 2 Normal Mode */
		else if(Config_Ptr->timer_mode == COMPARE)
    1d58:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5c:	81 81       	ldd	r24, Z+1	; 0x01
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	21 f5       	brne	.+72     	; 0x1daa <Timer_init+0x232>
			 * => TCNT2 Register:
			 * 4. Insert the initial value that you want the timer to start from it.
			 * => TIMSK Register:
			 * 5. Enable Compare match interrupt (OCIE2) in TIMSK register
			 */
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    1d62:	e5 e4       	ldi	r30, 0x45	; 69
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	88 e8       	ldi	r24, 0x88	; 136
    1d68:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_Prescaler);
    1d6a:	a5 e4       	ldi	r26, 0x45	; 69
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e5 e4       	ldi	r30, 0x45	; 69
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	98 2f       	mov	r25, r24
    1d76:	98 7f       	andi	r25, 0xF8	; 248
    1d78:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d7c:	85 81       	ldd	r24, Z+5	; 0x05
    1d7e:	89 2b       	or	r24, r25
    1d80:	8c 93       	st	X, r24
			TCNT2 = (Config_Ptr->intialValue) & 0xFF;	/* In order to ensure that the register not exceeding his maximum value (255) */
    1d82:	a4 e4       	ldi	r26, 0x44	; 68
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e9 81       	ldd	r30, Y+1	; 0x01
    1d88:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	8c 93       	st	X, r24
			OCR2 = (Config_Ptr->compareValue) & 0xFF;
    1d8e:	a3 e4       	ldi	r26, 0x43	; 67
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e9 81       	ldd	r30, Y+1	; 0x01
    1d94:	fa 81       	ldd	r31, Y+2	; 0x02
    1d96:	83 81       	ldd	r24, Z+3	; 0x03
    1d98:	94 81       	ldd	r25, Z+4	; 0x04
    1d9a:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2);
    1d9c:	a9 e5       	ldi	r26, 0x59	; 89
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e9 e5       	ldi	r30, 0x59	; 89
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 68       	ori	r24, 0x80	; 128
    1da8:	8c 93       	st	X, r24
		}	/* End of Timer 2 Compare Mode */
		break;
	}
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <Timer_setCallBack>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void Timer_setCallBack(void(*a_ptr)(void), TIMER_ID a_timerID)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <Timer_setCallBack+0x6>
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <Timer_setCallBack+0x8>
    1dc0:	0f 92       	push	r0
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timerID)
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3d 83       	std	Y+5, r19	; 0x05
    1dd4:	2c 83       	std	Y+4, r18	; 0x04
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	81 f0       	breq	.+32     	; 0x1e00 <Timer_setCallBack+0x48>
    1de0:	2c 81       	ldd	r18, Y+4	; 0x04
    1de2:	3d 81       	ldd	r19, Y+5	; 0x05
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	91 f0       	breq	.+36     	; 0x1e0e <Timer_setCallBack+0x56>
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	a1 f4       	brne	.+40     	; 0x1e1a <Timer_setCallBack+0x62>
	{
	/*---------------------------------------Timer 0--------------------------------------*/
	case TIMER0:
		/* Save the address of the Call back function in a global variable */
		g_callBackPtrTimer0 = a_ptr;
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	90 93 79 00 	sts	0x0079, r25
    1dfa:	80 93 78 00 	sts	0x0078, r24
    1dfe:	0d c0       	rjmp	.+26     	; 0x1e1a <Timer_setCallBack+0x62>
		break;
	/*---------------------------------------Timer 1--------------------------------------*/
	case TIMER1:
		/* Save the address of the Call back function in a global variable */
		g_callBackPtrTimer1 = a_ptr;
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	90 93 7b 00 	sts	0x007B, r25
    1e08:	80 93 7a 00 	sts	0x007A, r24
    1e0c:	06 c0       	rjmp	.+12     	; 0x1e1a <Timer_setCallBack+0x62>
		break;
	/*---------------------------------------Timer 2--------------------------------------*/
	case TIMER2:
		/* Save the address of the Call back function in a global variable */
		g_callBackPtrTimer2 = a_ptr;
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	9a 81       	ldd	r25, Y+2	; 0x02
    1e12:	90 93 7d 00 	sts	0x007D, r25
    1e16:	80 93 7c 00 	sts	0x007C, r24
		break;
	}
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <Timer_stop>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void Timer_stop(const TIMER_ID a_timerID)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <Timer_stop+0x6>
    1e30:	0f 92       	push	r0
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerID)
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3b 83       	std	Y+3, r19	; 0x03
    1e40:	2a 83       	std	Y+2, r18	; 0x02
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	9b 81       	ldd	r25, Y+3	; 0x03
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	89 f0       	breq	.+34     	; 0x1e6e <Timer_stop+0x44>
    1e4c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e4e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	a1 f0       	breq	.+40     	; 0x1e7e <Timer_stop+0x54>
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	b9 f4       	brne	.+46     	; 0x1e8c <Timer_stop+0x62>
	{
	/*---------------------------------------Timer 0--------------------------------------*/
	case TIMER0:
		/* Clear the bits of the clock in TIMER0 */
		TCCR0 = TCCR0 & 0xF8;
    1e5e:	a3 e5       	ldi	r26, 0x53	; 83
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e3 e5       	ldi	r30, 0x53	; 83
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	88 7f       	andi	r24, 0xF8	; 248
    1e6a:	8c 93       	st	X, r24
    1e6c:	0f c0       	rjmp	.+30     	; 0x1e8c <Timer_stop+0x62>
		break;
	/*---------------------------------------Timer 1--------------------------------------*/
	case TIMER1:
		/* Clear the bits of the clock in TIMER1 */
		TCCR1B = TCCR0 & 0xF8;
    1e6e:	ae e4       	ldi	r26, 0x4E	; 78
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e3 e5       	ldi	r30, 0x53	; 83
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	88 7f       	andi	r24, 0xF8	; 248
    1e7a:	8c 93       	st	X, r24
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <Timer_stop+0x62>
		break;
	/*---------------------------------------Timer 2--------------------------------------*/
	case TIMER2:
		/* Clear the bits of the clock in TIMER2 */
		TCCR2 = TCCR0 & 0xF8;
    1e7e:	a5 e4       	ldi	r26, 0x45	; 69
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e3 e5       	ldi	r30, 0x53	; 83
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	88 7f       	andi	r24, 0xF8	; 248
    1e8a:	8c 93       	st	X, r24
		break;
	}
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <Timer_DeInit>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void Timer_DeInit(const TIMER_ID a_timerID)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <Timer_DeInit+0x6>
    1e9e:	0f 92       	push	r0
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerID)
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	3b 83       	std	Y+3, r19	; 0x03
    1eae:	2a 83       	std	Y+2, r18	; 0x02
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	11 f1       	breq	.+68     	; 0x1efe <Timer_DeInit+0x66>
    1eba:	2a 81       	ldd	r18, Y+2	; 0x02
    1ebc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	d1 f1       	breq	.+116    	; 0x1f38 <Timer_DeInit+0xa0>
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	09 f0       	breq	.+2      	; 0x1ece <Timer_DeInit+0x36>
    1ecc:	51 c0       	rjmp	.+162    	; 0x1f70 <Timer_DeInit+0xd8>
	{
	/*---------------------------------------Timer 0--------------------------------------*/
	case TIMER0:
		/* Clear All Timer0 Registers */
		TCNT0 = 0;
    1ece:	e2 e5       	ldi	r30, 0x52	; 82
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	10 82       	st	Z, r1
		OCR0 = 0;
    1ed4:	ec e5       	ldi	r30, 0x5C	; 92
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	10 82       	st	Z, r1
		TCCR0 = 0;
    1eda:	e3 e5       	ldi	r30, 0x53	; 83
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	10 82       	st	Z, r1

		/* Disable the Timer 0 interrupt */
		TIMSK &= ~(1<<OCIE0) & ~(1<<TOIE0);
    1ee0:	a9 e5       	ldi	r26, 0x59	; 89
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e9 e5       	ldi	r30, 0x59	; 89
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8c 7f       	andi	r24, 0xFC	; 252
    1eec:	8c 93       	st	X, r24

		/* Clear the Flag */
		TIFR |= (1<<OCF0) | (1<<TOV0);
    1eee:	a8 e5       	ldi	r26, 0x58	; 88
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e8 e5       	ldi	r30, 0x58	; 88
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	83 60       	ori	r24, 0x03	; 3
    1efa:	8c 93       	st	X, r24
    1efc:	39 c0       	rjmp	.+114    	; 0x1f70 <Timer_DeInit+0xd8>
		break;
	/*---------------------------------------Timer 1--------------------------------------*/
	case TIMER1:
		/* Clear All Timer 1 Registers */
		TCNT1 = 0;
    1efe:	ec e4       	ldi	r30, 0x4C	; 76
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	11 82       	std	Z+1, r1	; 0x01
    1f04:	10 82       	st	Z, r1
		OCR1A = 0;
    1f06:	ea e4       	ldi	r30, 0x4A	; 74
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	11 82       	std	Z+1, r1	; 0x01
    1f0c:	10 82       	st	Z, r1
		TCCR1A = 0;
    1f0e:	ef e4       	ldi	r30, 0x4F	; 79
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	10 82       	st	Z, r1
		TCCR1B = 0;
    1f14:	ee e4       	ldi	r30, 0x4E	; 78
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	10 82       	st	Z, r1

		/* Disable the Timer 1 interrupt */
		TIMSK &= ~(1<<OCIE1A) & ~(1<<TOIE1);
    1f1a:	a9 e5       	ldi	r26, 0x59	; 89
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e9 e5       	ldi	r30, 0x59	; 89
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8b 7e       	andi	r24, 0xEB	; 235
    1f26:	8c 93       	st	X, r24

		/* Clear the Flag */
		TIFR |= (1<<OCF1A) | (1<<TOV1);
    1f28:	a8 e5       	ldi	r26, 0x58	; 88
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e8 e5       	ldi	r30, 0x58	; 88
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	84 61       	ori	r24, 0x14	; 20
    1f34:	8c 93       	st	X, r24
    1f36:	1c c0       	rjmp	.+56     	; 0x1f70 <Timer_DeInit+0xd8>
		break;
	/*---------------------------------------Timer 2--------------------------------------*/
	case TIMER2:
		/* Clear All Timer 2 Registers */
		TCNT1 = 0;
    1f38:	ec e4       	ldi	r30, 0x4C	; 76
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	11 82       	std	Z+1, r1	; 0x01
    1f3e:	10 82       	st	Z, r1
		OCR1A = 0;
    1f40:	ea e4       	ldi	r30, 0x4A	; 74
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	11 82       	std	Z+1, r1	; 0x01
    1f46:	10 82       	st	Z, r1
		TCCR1A = 0;
    1f48:	ef e4       	ldi	r30, 0x4F	; 79
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	10 82       	st	Z, r1
		TCCR1B = 0;
    1f4e:	ee e4       	ldi	r30, 0x4E	; 78
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	10 82       	st	Z, r1

		/* Disable the Timer 2 interrupt */
		TIMSK &= ~(1<<OCIE2) & ~(1<<TOIE2);
    1f54:	a9 e5       	ldi	r26, 0x59	; 89
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e9 e5       	ldi	r30, 0x59	; 89
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	8f 73       	andi	r24, 0x3F	; 63
    1f60:	8c 93       	st	X, r24

		/* Clear the Flag */
		TIFR |= (1<<OCF2) | (1<<TOV2);
    1f62:	a8 e5       	ldi	r26, 0x58	; 88
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e8 e5       	ldi	r30, 0x58	; 88
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 6c       	ori	r24, 0xC0	; 192
    1f6e:	8c 93       	st	X, r24
		break;
	}
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <TWI_init>:
 * - Select the required prescaler for the I2C
 * - Making The address of the MCU in case Master wants to communicate with it.
 * - Enable TWI
 */
void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <TWI_init+0x6>
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
	/* Adjusting the value of the TWBR register */
    TWBR = Config_Ptr->bit_rate;
    1f8a:	a0 e2       	ldi	r26, 0x20	; 32
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f90:	fa 81       	ldd	r31, Y+2	; 0x02
    1f92:	81 81       	ldd	r24, Z+1	; 0x01
    1f94:	8c 93       	st	X, r24

    TWSR = 0x00;
    1f96:	e1 e2       	ldi	r30, 0x21	; 33
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	10 82       	st	Z, r1
	
	/* Two Wire Bus address my address if any master device want to call (The microcontroller's Address is inserted in TWAR register) */
    TWAR = ((Config_Ptr->slaveAddress)<<1);
    1f9c:	a2 e2       	ldi	r26, 0x22	; 34
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 0f       	add	r24, r24
    1fa8:	8c 93       	st	X, r24
	
    /* enable TWI */
    TWCR = (1<<TWEN);
    1faa:	e6 e5       	ldi	r30, 0x56	; 86
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	84 e0       	ldi	r24, 0x04	; 4
    1fb0:	80 83       	st	Z, r24
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <TWI_start>:
/*
 * Description:
 * - The function is responsible for Sending the start bit
 */
void TWI_start(void)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1fc4:	e6 e5       	ldi	r30, 0x56	; 86
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	84 ea       	ldi	r24, 0xA4	; 164
    1fca:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fcc:	e6 e5       	ldi	r30, 0x56	; 86
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 23       	and	r24, r24
    1fd4:	dc f7       	brge	.-10     	; 0x1fcc <TWI_start+0x10>
}
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <TWI_stop>:
/*
 * Description:
 * - The function is responsible for Sending the stop bit
 */
void TWI_stop(void)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1fe4:	e6 e5       	ldi	r30, 0x56	; 86
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	84 e9       	ldi	r24, 0x94	; 148
    1fea:	80 83       	st	Z, r24
}
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <TWI_writeByte>:


void TWI_writeByte(uint8 data)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1ffe:	e3 e2       	ldi	r30, 0x23	; 35
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2006:	e6 e5       	ldi	r30, 0x56	; 86
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	84 e8       	ldi	r24, 0x84	; 132
    200c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    200e:	e6 e5       	ldi	r30, 0x56	; 86
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	88 23       	and	r24, r24
    2016:	dc f7       	brge	.-10     	; 0x200e <TWI_writeByte+0x1c>
}
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <TWI_readByteWithACK>:



uint8 TWI_readByteWithACK(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2028:	e6 e5       	ldi	r30, 0x56	; 86
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	84 ec       	ldi	r24, 0xC4	; 196
    202e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2030:	e6 e5       	ldi	r30, 0x56	; 86
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	88 23       	and	r24, r24
    2038:	dc f7       	brge	.-10     	; 0x2030 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    203a:	e3 e2       	ldi	r30, 0x23	; 35
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
}
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <TWI_readByteWithNACK>:


uint8 TWI_readByteWithNACK(void)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    204e:	e6 e5       	ldi	r30, 0x56	; 86
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	84 e8       	ldi	r24, 0x84	; 132
    2054:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2056:	e6 e5       	ldi	r30, 0x56	; 86
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	88 23       	and	r24, r24
    205e:	dc f7       	brge	.-10     	; 0x2056 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2060:	e3 e2       	ldi	r30, 0x23	; 35
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
}
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	0f 92       	push	r0
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2076:	e1 e2       	ldi	r30, 0x21	; 33
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	88 7f       	andi	r24, 0xF8	; 248
    207e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
}
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <UART_init>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <UART_init+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <UART_init+0x8>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	9c 83       	std	Y+4, r25	; 0x04
    2098:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    209a:	1a 82       	std	Y+2, r1	; 0x02
    209c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    209e:	eb e2       	ldi	r30, 0x2B	; 43
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    20a6:	ea e2       	ldi	r30, 0x2A	; 42
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	88 e1       	ldi	r24, 0x18	; 24
    20ac:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    20ae:	e0 e4       	ldi	r30, 0x40	; 64
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 e8       	ldi	r24, 0x80	; 128
    20b4:	80 83       	st	Z, r24

	/*
	 * Adjusting the register for selecting the number of bit that you want
	 */
	UCSRC |= ((Config_Ptr->data_size & 0x02)<< UCSZ0);
    20b6:	a0 e4       	ldi	r26, 0x40	; 64
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e0 e4       	ldi	r30, 0x40	; 64
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	28 2f       	mov	r18, r24
    20c2:	eb 81       	ldd	r30, Y+3	; 0x03
    20c4:	fc 81       	ldd	r31, Y+4	; 0x04
    20c6:	80 81       	ld	r24, Z
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	82 70       	andi	r24, 0x02	; 2
    20ce:	90 70       	andi	r25, 0x00	; 0
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	82 2b       	or	r24, r18
    20d6:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr->data_size & 0x04)<< UCSZ1);
    20d8:	a0 e4       	ldi	r26, 0x40	; 64
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e0 e4       	ldi	r30, 0x40	; 64
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	28 2f       	mov	r18, r24
    20e4:	eb 81       	ldd	r30, Y+3	; 0x03
    20e6:	fc 81       	ldd	r31, Y+4	; 0x04
    20e8:	80 81       	ld	r24, Z
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	84 70       	andi	r24, 0x04	; 4
    20f0:	90 70       	andi	r25, 0x00	; 0
    20f2:	88 0f       	add	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	82 2b       	or	r24, r18
    20fc:	8c 93       	st	X, r24

	/*
	 * Select Parity Mode
	 */
	UCSRC |= ((Config_Ptr -> parity_mode) << UPM0);
    20fe:	a0 e4       	ldi	r26, 0x40	; 64
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e0 e4       	ldi	r30, 0x40	; 64
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	28 2f       	mov	r18, r24
    210a:	eb 81       	ldd	r30, Y+3	; 0x03
    210c:	fc 81       	ldd	r31, Y+4	; 0x04
    210e:	81 81       	ldd	r24, Z+1	; 0x01
    2110:	88 2f       	mov	r24, r24
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	82 95       	swap	r24
    2116:	92 95       	swap	r25
    2118:	90 7f       	andi	r25, 0xF0	; 240
    211a:	98 27       	eor	r25, r24
    211c:	80 7f       	andi	r24, 0xF0	; 240
    211e:	98 27       	eor	r25, r24
    2120:	82 2b       	or	r24, r18
    2122:	8c 93       	st	X, r24

	/*
	 * Select the Number of Stop Bit
	 */
	UCSRC |= ((Config_Ptr -> stop_bit) << USBS);
    2124:	a0 e4       	ldi	r26, 0x40	; 64
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e0 e4       	ldi	r30, 0x40	; 64
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	28 2f       	mov	r18, r24
    2130:	eb 81       	ldd	r30, Y+3	; 0x03
    2132:	fc 81       	ldd	r31, Y+4	; 0x04
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	82 2b       	or	r24, r18
    2148:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    214a:	eb 81       	ldd	r30, Y+3	; 0x03
    214c:	fc 81       	ldd	r31, Y+4	; 0x04
    214e:	83 81       	ldd	r24, Z+3	; 0x03
    2150:	94 81       	ldd	r25, Z+4	; 0x04
    2152:	a5 81       	ldd	r26, Z+5	; 0x05
    2154:	b6 81       	ldd	r27, Z+6	; 0x06
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	aa 1f       	adc	r26, r26
    215c:	bb 1f       	adc	r27, r27
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	aa 1f       	adc	r26, r26
    2164:	bb 1f       	adc	r27, r27
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	aa 1f       	adc	r26, r26
    216c:	bb 1f       	adc	r27, r27
    216e:	9c 01       	movw	r18, r24
    2170:	ad 01       	movw	r20, r26
    2172:	80 e4       	ldi	r24, 0x40	; 64
    2174:	92 e4       	ldi	r25, 0x42	; 66
    2176:	af e0       	ldi	r26, 0x0F	; 15
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__udivmodsi4>
    2182:	da 01       	movw	r26, r20
    2184:	c9 01       	movw	r24, r18
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    218c:	e0 e4       	ldi	r30, 0x40	; 64
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	89 2f       	mov	r24, r25
    2196:	99 27       	eor	r25, r25
    2198:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    219a:	e9 e2       	ldi	r30, 0x29	; 41
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	80 83       	st	Z, r24
}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <UART_sendByte>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void UART_sendByte(const uint8 data)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	0f 92       	push	r0
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    21bc:	eb e2       	ldi	r30, 0x2B	; 43
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	80 72       	andi	r24, 0x20	; 32
    21c8:	90 70       	andi	r25, 0x00	; 0
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	b9 f3       	breq	.-18     	; 0x21bc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    21ce:	ec e2       	ldi	r30, 0x2C	; 44
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	80 83       	st	Z, r24
}
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <UART_recieveByte>:
 *
 * [Returns]: Return the received byte
 *
 ********************************************************************************************/
uint8 UART_recieveByte(void)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    21e6:	eb e2       	ldi	r30, 0x2B	; 43
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	88 23       	and	r24, r24
    21ee:	dc f7       	brge	.-10     	; 0x21e6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    21f0:	ec e2       	ldi	r30, 0x2C	; 44
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
}
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <UART_sendString>:
 *
 * [Returns]: None
 *
 ****************************************************************************************/
void UART_sendString(const uint8 *Str)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <UART_sendString+0x6>
    2202:	0f 92       	push	r0
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	9b 83       	std	Y+3, r25	; 0x03
    220a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    220c:	19 82       	std	Y+1, r1	; 0x01
    220e:	0e c0       	rjmp	.+28     	; 0x222c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	9b 81       	ldd	r25, Y+3	; 0x03
    221a:	fc 01       	movw	r30, r24
    221c:	e2 0f       	add	r30, r18
    221e:	f3 1f       	adc	r31, r19
    2220:	80 81       	ld	r24, Z
    2222:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UART_sendByte>
		i++;
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	8f 5f       	subi	r24, 0xFF	; 255
    222a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	9b 81       	ldd	r25, Y+3	; 0x03
    2236:	fc 01       	movw	r30, r24
    2238:	e2 0f       	add	r30, r18
    223a:	f3 1f       	adc	r31, r19
    223c:	80 81       	ld	r24, Z
    223e:	88 23       	and	r24, r24
    2240:	39 f7       	brne	.-50     	; 0x2210 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <UART_receiveString>:
 *
 * [Returns]: void
 *
 ********************************************************************************************/
void UART_receiveString(uint8 *Str)
{
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	00 d0       	rcall	.+0      	; 0x2258 <UART_receiveString+0xa>
    2258:	0f 92       	push	r0
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	9b 83       	std	Y+3, r25	; 0x03
    2260:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2262:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	9b 81       	ldd	r25, Y+3	; 0x03
    226e:	8c 01       	movw	r16, r24
    2270:	02 0f       	add	r16, r18
    2272:	13 1f       	adc	r17, r19
    2274:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_recieveByte>
    2278:	f8 01       	movw	r30, r16
    227a:	80 83       	st	Z, r24
    227c:	0f c0       	rjmp	.+30     	; 0x229c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	8f 5f       	subi	r24, 0xFF	; 255
    2282:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	9b 81       	ldd	r25, Y+3	; 0x03
    228e:	8c 01       	movw	r16, r24
    2290:	02 0f       	add	r16, r18
    2292:	13 1f       	adc	r17, r19
    2294:	0e 94 ef 10 	call	0x21de	; 0x21de <UART_recieveByte>
    2298:	f8 01       	movw	r30, r16
    229a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	9b 81       	ldd	r25, Y+3	; 0x03
    22a6:	fc 01       	movw	r30, r24
    22a8:	e2 0f       	add	r30, r18
    22aa:	f3 1f       	adc	r31, r19
    22ac:	80 81       	ld	r24, Z
    22ae:	83 32       	cpi	r24, 0x23	; 35
    22b0:	31 f7       	brne	.-52     	; 0x227e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	9b 81       	ldd	r25, Y+3	; 0x03
    22bc:	fc 01       	movw	r30, r24
    22be:	e2 0f       	add	r30, r18
    22c0:	f3 1f       	adc	r31, r19
    22c2:	10 82       	st	Z, r1
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	08 95       	ret

000022d4 <__udivmodsi4>:
    22d4:	a1 e2       	ldi	r26, 0x21	; 33
    22d6:	1a 2e       	mov	r1, r26
    22d8:	aa 1b       	sub	r26, r26
    22da:	bb 1b       	sub	r27, r27
    22dc:	fd 01       	movw	r30, r26
    22de:	0d c0       	rjmp	.+26     	; 0x22fa <__udivmodsi4_ep>

000022e0 <__udivmodsi4_loop>:
    22e0:	aa 1f       	adc	r26, r26
    22e2:	bb 1f       	adc	r27, r27
    22e4:	ee 1f       	adc	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	a2 17       	cp	r26, r18
    22ea:	b3 07       	cpc	r27, r19
    22ec:	e4 07       	cpc	r30, r20
    22ee:	f5 07       	cpc	r31, r21
    22f0:	20 f0       	brcs	.+8      	; 0x22fa <__udivmodsi4_ep>
    22f2:	a2 1b       	sub	r26, r18
    22f4:	b3 0b       	sbc	r27, r19
    22f6:	e4 0b       	sbc	r30, r20
    22f8:	f5 0b       	sbc	r31, r21

000022fa <__udivmodsi4_ep>:
    22fa:	66 1f       	adc	r22, r22
    22fc:	77 1f       	adc	r23, r23
    22fe:	88 1f       	adc	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	1a 94       	dec	r1
    2304:	69 f7       	brne	.-38     	; 0x22e0 <__udivmodsi4_loop>
    2306:	60 95       	com	r22
    2308:	70 95       	com	r23
    230a:	80 95       	com	r24
    230c:	90 95       	com	r25
    230e:	9b 01       	movw	r18, r22
    2310:	ac 01       	movw	r20, r24
    2312:	bd 01       	movw	r22, r26
    2314:	cf 01       	movw	r24, r30
    2316:	08 95       	ret

00002318 <__prologue_saves__>:
    2318:	2f 92       	push	r2
    231a:	3f 92       	push	r3
    231c:	4f 92       	push	r4
    231e:	5f 92       	push	r5
    2320:	6f 92       	push	r6
    2322:	7f 92       	push	r7
    2324:	8f 92       	push	r8
    2326:	9f 92       	push	r9
    2328:	af 92       	push	r10
    232a:	bf 92       	push	r11
    232c:	cf 92       	push	r12
    232e:	df 92       	push	r13
    2330:	ef 92       	push	r14
    2332:	ff 92       	push	r15
    2334:	0f 93       	push	r16
    2336:	1f 93       	push	r17
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	ca 1b       	sub	r28, r26
    2342:	db 0b       	sbc	r29, r27
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	09 94       	ijmp

00002350 <__epilogue_restores__>:
    2350:	2a 88       	ldd	r2, Y+18	; 0x12
    2352:	39 88       	ldd	r3, Y+17	; 0x11
    2354:	48 88       	ldd	r4, Y+16	; 0x10
    2356:	5f 84       	ldd	r5, Y+15	; 0x0f
    2358:	6e 84       	ldd	r6, Y+14	; 0x0e
    235a:	7d 84       	ldd	r7, Y+13	; 0x0d
    235c:	8c 84       	ldd	r8, Y+12	; 0x0c
    235e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2360:	aa 84       	ldd	r10, Y+10	; 0x0a
    2362:	b9 84       	ldd	r11, Y+9	; 0x09
    2364:	c8 84       	ldd	r12, Y+8	; 0x08
    2366:	df 80       	ldd	r13, Y+7	; 0x07
    2368:	ee 80       	ldd	r14, Y+6	; 0x06
    236a:	fd 80       	ldd	r15, Y+5	; 0x05
    236c:	0c 81       	ldd	r16, Y+4	; 0x04
    236e:	1b 81       	ldd	r17, Y+3	; 0x03
    2370:	aa 81       	ldd	r26, Y+2	; 0x02
    2372:	b9 81       	ldd	r27, Y+1	; 0x01
    2374:	ce 0f       	add	r28, r30
    2376:	d1 1d       	adc	r29, r1
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	ed 01       	movw	r28, r26
    2384:	08 95       	ret

00002386 <_exit>:
    2386:	f8 94       	cli

00002388 <__stop_program>:
    2388:	ff cf       	rjmp	.-2      	; 0x2388 <__stop_program>
